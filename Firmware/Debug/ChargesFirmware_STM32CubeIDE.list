
ChargesFirmware_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c3b4  0800c3b4  0001c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c46c  0800c46c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c46c  0800c46c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c46c  0800c46c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c46c  0800c46c  0001c46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c470  0800c470  0001c470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  2000017c  0800c5f0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  0800c5f0  00020c84  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c96e  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a6  00000000  00000000  0003cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00042948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e681  00000000  00000000  00043fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020128  00000000  00000000  00072639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f40f  00000000  00000000  00092761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c8  00000000  00000000  001a1bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000017c 	.word	0x2000017c
 8000210:	00000000 	.word	0x00000000
 8000214:	0800c39c 	.word	0x0800c39c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000180 	.word	0x20000180
 8000230:	0800c39c 	.word	0x0800c39c

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08c      	sub	sp, #48	; 0x30
 8000238:	af02      	add	r7, sp, #8
	  int16_t val;
	  float temp_c;
	  HAL_StatusTypeDef i2c;
	  uint8_t buf[1];
	  uint8_t validAddr[20];
	  uint8_t addrIndex = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 fbc3 	bl	80009ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f850 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f95e 	bl	8000508 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800024c:	f000 f8da 	bl	8000404 <MX_ICACHE_Init>
  MX_USB_Device_Init();
 8000250:	f00b fb8a 	bl	800b968 <MX_USB_Device_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000254:	f008 fbd8 	bl	8008a08 <MX_FATFS_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <main+0x2e>
    Error_Handler();
 800025e:	f000 f9b7 	bl	80005d0 <Error_Handler>
  }
  MX_I2C1_Init();
 8000262:	f000 f88f 	bl	8000384 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000266:	f000 f8d9 	bl	800041c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800026a:	2100      	movs	r1, #0
 800026c:	481c      	ldr	r0, [pc, #112]	; (80002e0 <main+0xac>)
 800026e:	f004 fe85 	bl	8004f7c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//i2c scanner in loop section

  int x = 0x77;
 8000272:	2377      	movs	r3, #119	; 0x77
 8000274:	623b      	str	r3, [r7, #32]
  	  while (1){
  		  buf[0] = 0x48;
 8000276:	2348      	movs	r3, #72	; 0x48
 8000278:	763b      	strb	r3, [r7, #24]
  		  i2c = HAL_I2C_Master_Transmit(&hi2c1, x, buf[0], 1, HAL_MAX_DELAY);
 800027a:	6a3b      	ldr	r3, [r7, #32]
 800027c:	b299      	uxth	r1, r3
 800027e:	7e3b      	ldrb	r3, [r7, #24]
 8000280:	461a      	mov	r2, r3
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2301      	movs	r3, #1
 800028a:	4816      	ldr	r0, [pc, #88]	; (80002e4 <main+0xb0>)
 800028c:	f000 ff4c 	bl	8001128 <HAL_I2C_Master_Transmit>
 8000290:	4603      	mov	r3, r0
 8000292:	77fb      	strb	r3, [r7, #31]

  		  buf[1]= 0x00;
 8000294:	2300      	movs	r3, #0
 8000296:	767b      	strb	r3, [r7, #25]
  		  i2c = HAL_I2C_Master_Transmit(&hi2c1, x, buf[1], 1, HAL_MAX_DELAY);
 8000298:	6a3b      	ldr	r3, [r7, #32]
 800029a:	b299      	uxth	r1, r3
 800029c:	7e7b      	ldrb	r3, [r7, #25]
 800029e:	461a      	mov	r2, r3
 80002a0:	f04f 33ff 	mov.w	r3, #4294967295
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2301      	movs	r3, #1
 80002a8:	480e      	ldr	r0, [pc, #56]	; (80002e4 <main+0xb0>)
 80002aa:	f000 ff3d 	bl	8001128 <HAL_I2C_Master_Transmit>
 80002ae:	4603      	mov	r3, r0
 80002b0:	77fb      	strb	r3, [r7, #31]

  		  i2c = HAL_I2C_Master_Receive(&hi2c1, x, buf[1], 2, HAL_MAX_DELAY);
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	b299      	uxth	r1, r3
 80002b6:	7e7b      	ldrb	r3, [r7, #25]
 80002b8:	461a      	mov	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2302      	movs	r3, #2
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0xb0>)
 80002c4:	f001 f824 	bl	8001310 <HAL_I2C_Master_Receive>
 80002c8:	4603      	mov	r3, r0
 80002ca:	77fb      	strb	r3, [r7, #31]
  		  val = ((int16_t)buf[1] << 4) | (buf[2] >> 4);
 80002cc:	7e7b      	ldrb	r3, [r7, #25]
 80002ce:	011b      	lsls	r3, r3, #4
 80002d0:	b21a      	sxth	r2, r3
 80002d2:	7ebb      	ldrb	r3, [r7, #26]
 80002d4:	091b      	lsrs	r3, r3, #4
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	b21b      	sxth	r3, r3
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
  		  buf[0] = 0x48;
 80002de:	e7ca      	b.n	8000276 <main+0x42>
 80002e0:	200001e4 	.word	0x200001e4
 80002e4:	20000198 	.word	0x20000198

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b098      	sub	sp, #96	; 0x60
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2248      	movs	r2, #72	; 0x48
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00c f848 	bl	800c38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800030a:	2000      	movs	r0, #0
 800030c:	f003 f82e 	bl	800336c <HAL_PWREx_ControlVoltageScaling>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000316:	f000 f95b 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	2303      	movs	r3, #3
 800032a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000330:	230c      	movs	r3, #12
 8000332:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000334:	2307      	movs	r3, #7
 8000336:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000338:	2304      	movs	r3, #4
 800033a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f003 f8b1 	bl	80034ac <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000350:	f000 f93e 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2303      	movs	r3, #3
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2104      	movs	r1, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f003 fd7f 	bl	8003e70 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000378:	f000 f92a 	bl	80005d0 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3760      	adds	r7, #96	; 0x60
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <MX_I2C1_Init+0x74>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <MX_I2C1_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009032AE;
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_I2C1_Init+0x74>)
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <MX_I2C1_Init+0x7c>)
 8000392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_I2C1_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003be:	480e      	ldr	r0, [pc, #56]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003c0:	f000 fe22 	bl	8001008 <HAL_I2C_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ca:	f000 f901 	bl	80005d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4809      	ldr	r0, [pc, #36]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003d2:	f001 fa73 	bl	80018bc <HAL_I2CEx_ConfigAnalogFilter>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 f8f8 	bl	80005d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e0:	2100      	movs	r1, #0
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003e4:	f001 fab5 	bl	8001952 <HAL_I2CEx_ConfigDigitalFilter>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 f8ef 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000198 	.word	0x20000198
 80003fc:	40005400 	.word	0x40005400
 8000400:	009032ae 	.word	0x009032ae

08000404 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000408:	f001 faf0 	bl	80019ec <HAL_ICACHE_Enable>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000412:	f000 f8dd 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08e      	sub	sp, #56	; 0x38
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	f107 031c 	add.w	r3, r7, #28
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000450:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <MX_TIM4_Init+0xe8>)
 8000452:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000456:	227f      	movs	r2, #127	; 0x7f
 8000458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_TIM4_Init+0xe4>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000462:	2214      	movs	r2, #20
 8000464:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_TIM4_Init+0xe4>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000474:	f004 fcca 	bl	8004e0c <HAL_TIM_Base_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800047e:	f000 f8a7 	bl	80005d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048c:	4619      	mov	r1, r3
 800048e:	481c      	ldr	r0, [pc, #112]	; (8000500 <MX_TIM4_Init+0xe4>)
 8000490:	f004 ff8a 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800049a:	f000 f899 	bl	80005d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800049e:	4818      	ldr	r0, [pc, #96]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004a0:	f004 fd0b 	bl	8004eba <HAL_TIM_PWM_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80004aa:	f000 f891 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	4619      	mov	r1, r3
 80004bc:	4810      	ldr	r0, [pc, #64]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004be:	f005 fc6b 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80004c8:	f000 f882 	bl	80005d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004cc:	2360      	movs	r3, #96	; 0x60
 80004ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004e4:	f004 fe50 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80004ee:	f000 f86f 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80004f2:	4803      	ldr	r0, [pc, #12]	; (8000500 <MX_TIM4_Init+0xe4>)
 80004f4:	f000 f914 	bl	8000720 <HAL_TIM_MspPostInit>

}
 80004f8:	bf00      	nop
 80004fa:	3738      	adds	r7, #56	; 0x38
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200001e4 	.word	0x200001e4
 8000504:	40000800 	.word	0x40000800

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_GPIO_Init+0xc0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000536:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <MX_GPIO_Init+0xc0>)
 800053c:	f043 0310 	orr.w	r3, r3, #16
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0310 	and.w	r3, r3, #16
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_GPIO_Init+0xc0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <MX_GPIO_Init+0xc0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <MX_GPIO_Init+0xc0>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_GPIO_Init+0xc0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <MX_GPIO_Init+0xc4>)
 800059e:	f000 fd1b 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_GPIO_Init+0xc4>)
 80005bc:	f000 fb8c 	bl	8000cd8 <HAL_GPIO_Init>

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	42021000 	.word	0x42021000

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x44>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6613      	str	r3, [r2, #96]	; 0x60
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x44>)
 80005f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <HAL_MspInit+0x44>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	6593      	str	r3, [r2, #88]	; 0x58
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_MspInit+0x44>)
 8000608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000612:	f002 ff17 	bl	8003444 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0ae      	sub	sp, #184	; 0xb8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2294      	movs	r2, #148	; 0x94
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00b fea1 	bl	800c38c <memset>
  if(hi2c->Instance==I2C1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <HAL_I2C_MspInit+0xb0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d13a      	bne.n	80006ca <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000658:	2300      	movs	r3, #0
 800065a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4618      	mov	r0, r3
 8000662:	f003 febd 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800066c:	f7ff ffb0 	bl	80005d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000688:	23c0      	movs	r3, #192	; 0xc0
 800068a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068e:	2312      	movs	r3, #18
 8000690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a0:	2304      	movs	r3, #4
 80006a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006aa:	4619      	mov	r1, r3
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_I2C_MspInit+0xb8>)
 80006ae:	f000 fb13 	bl	8000cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 80006b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006bc:	6593      	str	r3, [r2, #88]	; 0x58
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_I2C_MspInit+0xb4>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ca:	bf00      	nop
 80006cc:	37b8      	adds	r7, #184	; 0xb8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	42020400 	.word	0x42020400

080006e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <HAL_TIM_Base_MspInit+0x38>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d10b      	bne.n	800070a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_TIM_Base_MspInit+0x3c>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <HAL_TIM_Base_MspInit+0x3c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_TIM_Base_MspInit+0x3c>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40000800 	.word	0x40000800
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <HAL_TIM_MspPostInit+0x64>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d11c      	bne.n	800077c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_TIM_MspPostInit+0x68>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <HAL_TIM_MspPostInit+0x68>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_TIM_MspPostInit+0x68>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_TIM_MspPostInit+0x6c>)
 8000778:	f000 faae 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40000800 	.word	0x40000800
 8000788:	40021000 	.word	0x40021000
 800078c:	42020c00 	.word	0x42020c00

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f94c 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <USB_FS_IRQHandler+0x10>)
 80007ea:	f001 fa16 	bl	8001c1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000718 	.word	0x20000718

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000822:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d107      	bne.n	800083e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e005      	b.n	800084a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	f003 030f 	and.w	r3, r3, #15
 8000848:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <SystemCoreClockUpdate+0x148>)
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000852:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000854:	4b42      	ldr	r3, [pc, #264]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 030c 	and.w	r3, r3, #12
 800085c:	2b0c      	cmp	r3, #12
 800085e:	d866      	bhi.n	800092e <SystemCoreClockUpdate+0x112>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <SystemCoreClockUpdate+0x4c>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	0800089d 	.word	0x0800089d
 800086c:	0800092f 	.word	0x0800092f
 8000870:	0800092f 	.word	0x0800092f
 8000874:	0800092f 	.word	0x0800092f
 8000878:	080008a5 	.word	0x080008a5
 800087c:	0800092f 	.word	0x0800092f
 8000880:	0800092f 	.word	0x0800092f
 8000884:	0800092f 	.word	0x0800092f
 8000888:	080008ad 	.word	0x080008ad
 800088c:	0800092f 	.word	0x0800092f
 8000890:	0800092f 	.word	0x0800092f
 8000894:	0800092f 	.word	0x0800092f
 8000898:	080008b5 	.word	0x080008b5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800089c:	4a32      	ldr	r2, [pc, #200]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	6013      	str	r3, [r2, #0]
      break;
 80008a2:	e048      	b.n	8000936 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 80008a6:	4a31      	ldr	r2, [pc, #196]	; (800096c <SystemCoreClockUpdate+0x150>)
 80008a8:	601a      	str	r2, [r3, #0]
      break;
 80008aa:	e044      	b.n	8000936 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <SystemCoreClockUpdate+0x154>)
 80008b0:	601a      	str	r2, [r3, #0]
      break;
 80008b2:	e040      	b.n	8000936 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <SystemCoreClockUpdate+0x144>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <SystemCoreClockUpdate+0x144>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	3301      	adds	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d003      	beq.n	80008da <SystemCoreClockUpdate+0xbe>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d006      	beq.n	80008e6 <SystemCoreClockUpdate+0xca>
 80008d8:	e00b      	b.n	80008f2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <SystemCoreClockUpdate+0x150>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	613b      	str	r3, [r7, #16]
          break;
 80008e4:	e00b      	b.n	80008fe <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80008e6:	4a22      	ldr	r2, [pc, #136]	; (8000970 <SystemCoreClockUpdate+0x154>)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	613b      	str	r3, [r7, #16]
          break;
 80008f0:	e005      	b.n	80008fe <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	613b      	str	r3, [r7, #16]
          break;
 80008fc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0e5b      	lsrs	r3, r3, #25
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	3301      	adds	r3, #1
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	fbb2 f3f3 	udiv	r3, r2, r3
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 800092a:	6013      	str	r3, [r2, #0]
      break;
 800092c:	e003      	b.n	8000936 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	6013      	str	r3, [r2, #0]
      break;
 8000934:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SystemCoreClockUpdate+0x144>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <SystemCoreClockUpdate+0x158>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemCoreClockUpdate+0x14c>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	0800c408 	.word	0x0800c408
 8000968:	20000000 	.word	0x20000000
 800096c:	00f42400 	.word	0x00f42400
 8000970:	01e84800 	.word	0x01e84800
 8000974:	0800c3f8 	.word	0x0800c3f8

08000978 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f7ff ff3c 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000980:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000982:	e003      	b.n	800098c <LoopCopyDataInit>

08000984 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000986:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000988:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800098a:	3104      	adds	r1, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000990:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000992:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000994:	d3f6      	bcc.n	8000984 <CopyDataInit>
	ldr	r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000998:	e002      	b.n	80009a0 <LoopFillZerobss>

0800099a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800099a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800099c:	f842 3b04 	str.w	r3, [r2], #4

080009a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <LoopForever+0x16>)
	cmp	r2, r3
 80009a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009a4:	d3f9      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f00b fccd 	bl	800c344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fc43 	bl	8000234 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 80009b0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80009b4:	0800c474 	.word	0x0800c474
	ldr	r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009bc:	2000017c 	.word	0x2000017c
	ldr	r2, =_sbss
 80009c0:	2000017c 	.word	0x2000017c
	ldr	r3, = _ebss
 80009c4:	20000c84 	.word	0x20000c84

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>

080009ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 f93f 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80009da:	f7ff ff1f 	bl	800081c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2007      	movs	r0, #7
 80009e0:	f000 f80e 	bl	8000a00 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f0:	f7ff fdf4 	bl	80005dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d023      	beq.n	8000a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_InitTick+0x70>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f947 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10f      	bne.n	8000a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d809      	bhi.n	8000a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f913 	bl	8000c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0x74>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e004      	b.n	8000a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e001      	b.n	8000a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000230 	.word	0x20000230

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000230 	.word	0x20000230

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0152      	lsls	r2, r2, #5
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0152      	lsls	r2, r2, #5
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	bf28      	it	cs
 8000bca:	2303      	movcs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	2107      	movs	r1, #7
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff29 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff40 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff90 	bl	8000bac <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5f 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff33 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa4 	bl	8000c14 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ce6:	e158      	b.n	8000f9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 814a 	beq.w	8000f94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d00b      	beq.n	8000d20 <HAL_GPIO_Init+0x48>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d14:	2b11      	cmp	r3, #17
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b12      	cmp	r3, #18
 8000d1e:	d130      	bne.n	8000d82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d56:	2201      	movs	r2, #1
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	f003 0201 	and.w	r2, r3, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0xea>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d123      	bne.n	8000e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	6939      	ldr	r1, [r7, #16]
 8000e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0203 	and.w	r2, r3, #3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80a4 	beq.w	8000f94 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000e4c:	4a5a      	ldr	r2, [pc, #360]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3318      	adds	r3, #24
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <HAL_GPIO_Init+0x2e4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d025      	beq.n	8000ec4 <HAL_GPIO_Init+0x1ec>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d01f      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a50      	ldr	r2, [pc, #320]	; (8000fc4 <HAL_GPIO_Init+0x2ec>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d019      	beq.n	8000ebc <HAL_GPIO_Init+0x1e4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d013      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_GPIO_Init+0x2f4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d00d      	beq.n	8000eb4 <HAL_GPIO_Init+0x1dc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x2f8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d007      	beq.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x2fc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_GPIO_Init+0x1d4>
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e00c      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eac:	2307      	movs	r3, #7
 8000eae:	e00a      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000ed6:	4938      	ldr	r1, [pc, #224]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3318      	adds	r3, #24
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f38:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_GPIO_Init+0x2e0>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae9f 	bne.w	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	4002f400 	.word	0x4002f400
 8000fbc:	42020000 	.word	0x42020000
 8000fc0:	42020400 	.word	0x42020400
 8000fc4:	42020800 	.word	0x42020800
 8000fc8:	42020c00 	.word	0x42020c00
 8000fcc:	42021000 	.word	0x42021000
 8000fd0:	42021400 	.word	0x42021400
 8000fd4:	42021800 	.word	0x42021800

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e081      	b.n	800111e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff faf8 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2224      	movs	r2, #36	; 0x24
 8001038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001058:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001068:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	e006      	b.n	8001090 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800108e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d104      	bne.n	80010a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	ea42 0103 	orr.w	r1, r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	021a      	lsls	r2, r3, #8
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69d9      	ldr	r1, [r3, #28]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2220      	movs	r2, #32
 800110a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	460b      	mov	r3, r1
 8001136:	817b      	strh	r3, [r7, #10]
 8001138:	4613      	mov	r3, r2
 800113a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b20      	cmp	r3, #32
 8001146:	f040 80da 	bne.w	80012fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_I2C_Master_Transmit+0x30>
 8001154:	2302      	movs	r3, #2
 8001156:	e0d3      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001160:	f7ff fc9e 	bl	8000aa0 <HAL_GetTick>
 8001164:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2319      	movs	r3, #25
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 f9e6 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0be      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2221      	movs	r2, #33	; 0x21
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2210      	movs	r2, #16
 800118e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	893a      	ldrh	r2, [r7, #8]
 80011a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2bff      	cmp	r3, #255	; 0xff
 80011b2:	d90e      	bls.n	80011d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	22ff      	movs	r2, #255	; 0xff
 80011b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	8979      	ldrh	r1, [r7, #10]
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <HAL_I2C_Master_Transmit+0x1e0>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 fb48 	bl	8001860 <I2C_TransferConfig>
 80011d0:	e06c      	b.n	80012ac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	8979      	ldrh	r1, [r7, #10]
 80011e4:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_I2C_Master_Transmit+0x1e0>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 fb37 	bl	8001860 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80011f2:	e05b      	b.n	80012ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	6a39      	ldr	r1, [r7, #32]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f9e3 	bl	80015c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e07b      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001222:	b29b      	uxth	r3, r3
 8001224:	3b01      	subs	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001230:	3b01      	subs	r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123c:	b29b      	uxth	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d034      	beq.n	80012ac <HAL_I2C_Master_Transmit+0x184>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001246:	2b00      	cmp	r3, #0
 8001248:	d130      	bne.n	80012ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f975 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e04d      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d90e      	bls.n	800128c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	b2da      	uxtb	r2, r3
 800127a:	8979      	ldrh	r1, [r7, #10]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 faeb 	bl	8001860 <I2C_TransferConfig>
 800128a:	e00f      	b.n	80012ac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29a      	uxth	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	b2da      	uxtb	r2, r3
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fada 	bl	8001860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d19e      	bne.n	80011f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 f9c2 	bl	8001644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e01a      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2220      	movs	r2, #32
 80012d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_I2C_Master_Transmit+0x1e4>)
 80012de:	400b      	ands	r3, r1
 80012e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80012fe:	2302      	movs	r3, #2
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	80002000 	.word	0x80002000
 800130c:	fe00e800 	.word	0xfe00e800

08001310 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af02      	add	r7, sp, #8
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	817b      	strh	r3, [r7, #10]
 8001320:	4613      	mov	r3, r2
 8001322:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b20      	cmp	r3, #32
 800132e:	f040 80db 	bne.w	80014e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_I2C_Master_Receive+0x30>
 800133c:	2302      	movs	r3, #2
 800133e:	e0d4      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001348:	f7ff fbaa 	bl	8000aa0 <HAL_GetTick>
 800134c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2319      	movs	r3, #25
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f8f2 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0bf      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2222      	movs	r2, #34	; 0x22
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2210      	movs	r2, #16
 8001376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	893a      	ldrh	r2, [r7, #8]
 800138a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d90e      	bls.n	80013ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	8979      	ldrh	r1, [r7, #10]
 80013aa:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <HAL_I2C_Master_Receive+0x1e4>)
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 fa54 	bl	8001860 <I2C_TransferConfig>
 80013b8:	e06d      	b.n	8001496 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	8979      	ldrh	r1, [r7, #10]
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <HAL_I2C_Master_Receive+0x1e4>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fa43 	bl	8001860 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80013da:	e05c      	b.n	8001496 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	6a39      	ldr	r1, [r7, #32]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f96b 	bl	80016bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e07c      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140c:	3b01      	subs	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d034      	beq.n	8001496 <HAL_I2C_Master_Receive+0x186>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	d130      	bne.n	8001496 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	2200      	movs	r2, #0
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f880 	bl	8001544 <I2C_WaitOnFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e04d      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001452:	b29b      	uxth	r3, r3
 8001454:	2bff      	cmp	r3, #255	; 0xff
 8001456:	d90e      	bls.n	8001476 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001462:	b2da      	uxtb	r2, r3
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f9f6 	bl	8001860 <I2C_TransferConfig>
 8001474:	e00f      	b.n	8001496 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147a:	b29a      	uxth	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001484:	b2da      	uxtb	r2, r3
 8001486:	8979      	ldrh	r1, [r7, #10]
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f9e5 	bl	8001860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d19d      	bne.n	80013dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6a39      	ldr	r1, [r7, #32]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f8cd 	bl	8001644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e01a      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2220      	movs	r2, #32
 80014ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_I2C_Master_Receive+0x1e8>)
 80014c8:	400b      	ands	r3, r1
 80014ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2220      	movs	r2, #32
 80014d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e000      	b.n	80014ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	80002400 	.word	0x80002400
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d103      	bne.n	800151a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d007      	beq.n	8001538 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	619a      	str	r2, [r3, #24]
  }
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001554:	e022      	b.n	800159c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d01e      	beq.n	800159c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155e:	f7ff fa9f 	bl	8000aa0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d302      	bcc.n	8001574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e00f      	b.n	80015bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4013      	ands	r3, r2
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d0cd      	beq.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015d0:	e02c      	b.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f8dc 	bl	8001794 <I2C_IsAcknowledgeFailed>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e02a      	b.n	800163c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d01e      	beq.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ee:	f7ff fa57 	bl	8000aa0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d302      	bcc.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d113      	bne.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2220      	movs	r2, #32
 8001614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e007      	b.n	800163c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d1cb      	bne.n	80015d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001650:	e028      	b.n	80016a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f89c 	bl	8001794 <I2C_IsAcknowledgeFailed>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e026      	b.n	80016b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001666:	f7ff fa1b 	bl	8000aa0 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	429a      	cmp	r2, r3
 8001674:	d302      	bcc.n	800167c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d113      	bne.n	80016a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e007      	b.n	80016b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d1cf      	bne.n	8001652 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80016c8:	e055      	b.n	8001776 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f860 	bl	8001794 <I2C_IsAcknowledgeFailed>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e053      	b.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d129      	bne.n	8001740 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d105      	bne.n	8001706 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e03f      	b.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2220      	movs	r2, #32
 800170c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800171a:	400b      	ands	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e022      	b.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001740:	f7ff f9ae 	bl	8000aa0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d302      	bcc.n	8001756 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e007      	b.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b04      	cmp	r3, #4
 8001782:	d1a2      	bne.n	80016ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	fe00e800 	.word	0xfe00e800

08001794 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d151      	bne.n	8001852 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ae:	e022      	b.n	80017f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b6:	d01e      	beq.n	80017f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b8:	f7ff f972 	bl	8000aa0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d302      	bcc.n	80017ce <I2C_IsAcknowledgeFailed+0x3a>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d113      	bne.n	80017f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f043 0220 	orr.w	r2, r3, #32
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02e      	b.n	8001854 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b20      	cmp	r3, #32
 8001802:	d1d5      	bne.n	80017b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2220      	movs	r2, #32
 8001812:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fe71 	bl	80014fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <I2C_IsAcknowledgeFailed+0xc8>)
 8001826:	400b      	ands	r3, r1
 8001828:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	fe00e800 	.word	0xfe00e800

08001860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	817b      	strh	r3, [r7, #10]
 800186e:	4613      	mov	r3, r2
 8001870:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	0d5b      	lsrs	r3, r3, #21
 800187c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <I2C_TransferConfig+0x58>)
 8001882:	430b      	orrs	r3, r1
 8001884:	43db      	mvns	r3, r3
 8001886:	ea02 0103 	and.w	r1, r2, r3
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001890:	7a7b      	ldrb	r3, [r7, #9]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	03ff63ff 	.word	0x03ff63ff

080018bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d138      	bne.n	8001944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018dc:	2302      	movs	r3, #2
 80018de:	e032      	b.n	8001946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800190e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b20      	cmp	r3, #32
 8001966:	d139      	bne.n	80019dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001972:	2302      	movs	r3, #2
 8001974:	e033      	b.n	80019de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2224      	movs	r2, #36	; 0x24
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019dc:	2302      	movs	r3, #2
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_ICACHE_Enable+0x1c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_ICACHE_Enable+0x1c>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40030400 	.word	0x40030400

08001a0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af06      	add	r7, sp, #24
 8001a12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0d7      	b.n	8001bce <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f00a f93c 	bl	800bcb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fa46 	bl	8005ed6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e04c      	b.n	8001aea <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3301      	adds	r3, #1
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	b298      	uxth	r0, r3
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3336      	adds	r3, #54	; 0x36
 8001a8e:	4602      	mov	r2, r0
 8001a90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3303      	adds	r3, #3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3338      	adds	r3, #56	; 0x38
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	333c      	adds	r3, #60	; 0x3c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3340      	adds	r3, #64	; 0x40
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3ad      	bcc.n	8001a50 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e044      	b.n	8001b84 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3301      	adds	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3b5      	bcc.n	8001afa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	687e      	ldr	r6, [r7, #4]
 8001b96:	466d      	mov	r5, sp
 8001b98:	f106 0410 	add.w	r4, r6, #16
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	602b      	str	r3, [r5, #0]
 8001ba4:	1d33      	adds	r3, r6, #4
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f004 f9af 	bl	8005f0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f001 fb97 	bl	80032fa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_Start+0x16>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e012      	b.n	8001c12 <HAL_PCD_Start+0x3c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f955 	bl	8005ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fe4a 	bl	800889c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 fe4f 	bl	80088ca <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c36:	d102      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fb5a 	bl	80022f2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 fe41 	bl	80088ca <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c52:	d112      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f00a f8de 	bl	800be2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c72:	2100      	movs	r1, #0
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f91e 	bl	8001eb6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 fe23 	bl	80088ca <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 fe0c 	bl	80088ca <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f006 fdf5 	bl	80088ca <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cea:	d133      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0208 	bic.w	r2, r2, #8
 8001d16:	b292      	uxth	r2, r2
 8001d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f00a fa87 	bl	800c244 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f00a f8b2 	bl	800bea0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f006 fdb6 	bl	80088ca <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d68:	d126      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0208 	orr.w	r2, r2, #8
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d94:	b292      	uxth	r2, r2
 8001d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0204 	orr.w	r2, r2, #4
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f00a f85a 	bl	800be6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fd84 	bl	80088ca <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d13f      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dde:	b292      	uxth	r2, r2
 8001de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12b      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0204 	orr.w	r2, r2, #4
 8001e00:	b292      	uxth	r2, r2
 8001e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0208 	orr.w	r2, r2, #8
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f00a fa00 	bl	800c244 <HAL_PCDEx_LPM_Callback>
 8001e44:	e002      	b.n	8001e4c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f00a f810 	bl	800be6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f006 fd3a 	bl	80088ca <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e60:	d10e      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f009 ffc9 	bl	800be12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f006 fd20 	bl	80088ca <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e94:	d10b      	bne.n	8001eae <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_PCD_SetAddress+0x1a>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e013      	b.n	8001ef8 <HAL_PCD_SetAddress+0x42>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 fcc3 	bl	8008874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	70fb      	strb	r3, [r7, #3]
 8001f12:	460b      	mov	r3, r1
 8001f14:	803b      	strh	r3, [r7, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0e      	bge.n	8001f44 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	705a      	strb	r2, [r3, #1]
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0207 	and.w	r2, r3, #7
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f6e:	883a      	ldrh	r2, [r7, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	78ba      	ldrb	r2, [r7, #2]
 8001f78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_EP_Open+0xa6>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00e      	b.n	8001fc4 <HAL_PCD_EP_Open+0xc4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f003 ffcb 	bl	8005f50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da0e      	bge.n	8001ffe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0207 	and.w	r2, r3, #7
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_PCD_EP_Close+0x6a>
 8002032:	2302      	movs	r3, #2
 8002034:	e00e      	b.n	8002054 <HAL_PCD_EP_Close+0x88>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 faf1 	bl	800662c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	460b      	mov	r3, r1
 800206a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 0207 	and.w	r2, r3, #7
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6979      	ldr	r1, [r7, #20]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fca4 	bl	8006a06 <USB_EPStartXfer>
 80020be:	e005      	b.n	80020cc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fc9d 	bl	8006a06 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	f003 0207 	and.w	r2, r3, #7
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020f8:	681b      	ldr	r3, [r3, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2201      	movs	r2, #1
 8002150:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	b2da      	uxtb	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fc49 	bl	8006a06 <USB_EPStartXfer>
 8002174:	e005      	b.n	8002182 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6979      	ldr	r1, [r7, #20]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fc42 	bl	8006a06 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0207 	and.w	r2, r3, #7
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d901      	bls.n	80021aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e03e      	b.n	8002228 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da0e      	bge.n	80021d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
 80021ce:	e00c      	b.n	80021ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_PCD_EP_SetStall+0x7e>
 8002206:	2302      	movs	r3, #2
 8002208:	e00e      	b.n	8002228 <HAL_PCD_EP_SetStall+0x9c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	f006 fa2c 	bl	8008676 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 020f 	and.w	r2, r3, #15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d901      	bls.n	800224e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e040      	b.n	80022d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da0e      	bge.n	8002274 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
 8002272:	e00e      	b.n	8002292 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_EP_ClrStall+0x82>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e00e      	b.n	80022d0 <HAL_PCD_EP_ClrStall+0xa0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 fa29 	bl	8008718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08e      	sub	sp, #56	; 0x38
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022fa:	e2d6      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002304:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 815b 	bne.w	80025d2 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800231c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d150      	bne.n	80023c8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002336:	81fb      	strh	r3, [r7, #14]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002346:	b29b      	uxth	r3, r3
 8002348:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3328      	adds	r3, #40	; 0x28
 800234e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	441a      	add	r2, r3
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002386:	2100      	movs	r1, #0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f009 fd28 	bl	800bdde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8287 	beq.w	80028aa <PCD_EP_ISR_Handler+0x5b8>
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8282 	bne.w	80028aa <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b292      	uxth	r2, r2
 80023ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023c6:	e270      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d032      	beq.n	8002448 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800241c:	b29b      	uxth	r3, r3
 800241e:	f006 faa6 	bl	800896e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29a      	uxth	r2, r3
 800242a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800242e:	4013      	ands	r3, r2
 8002430:	823b      	strh	r3, [r7, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	8a3a      	ldrh	r2, [r7, #16]
 8002438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243c:	b292      	uxth	r2, r2
 800243e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f009 fc9f 	bl	800bd84 <HAL_PCD_SetupStageCallback>
 8002446:	e230      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002448:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800244c:	2b00      	cmp	r3, #0
 800244e:	f280 822c 	bge.w	80028aa <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29a      	uxth	r2, r3
 800245a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800245e:	4013      	ands	r3, r2
 8002460:	83bb      	strh	r3, [r7, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8bba      	ldrh	r2, [r7, #28]
 8002468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d019      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x1e2>
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f006 fa58 	bl	800896e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	441a      	add	r2, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024cc:	2100      	movs	r1, #0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f009 fc6a 	bl	800bda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f040 81e2 	bne.w	80028aa <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d112      	bne.n	8002534 <PCD_EP_ISR_Handler+0x242>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002518:	b29a      	uxth	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252c:	b29a      	uxth	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e02f      	b.n	8002594 <PCD_EP_ISR_Handler+0x2a2>
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b3e      	cmp	r3, #62	; 0x3e
 800253a:	d813      	bhi.n	8002564 <PCD_EP_ISR_Handler+0x272>
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <PCD_EP_ISR_Handler+0x264>
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	3301      	adds	r3, #1
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	b29b      	uxth	r3, r3
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e017      	b.n	8002594 <PCD_EP_ISR_Handler+0x2a2>
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <PCD_EP_ISR_Handler+0x28c>
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	3b01      	subs	r3, #1
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	b29b      	uxth	r3, r3
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	b29b      	uxth	r3, r3
 8002586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258e:	b29a      	uxth	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a4:	827b      	strh	r3, [r7, #18]
 80025a6:	8a7b      	ldrh	r3, [r7, #18]
 80025a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025ac:	827b      	strh	r3, [r7, #18]
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b4:	827b      	strh	r3, [r7, #18]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	8a7b      	ldrh	r3, [r7, #18]
 80025bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	8013      	strh	r3, [r2, #0]
 80025d0:	e16b      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f280 80e4 	bge.w	80027b6 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002604:	4013      	ands	r3, r2
 8002606:	853b      	strh	r3, [r7, #40]	; 0x28
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261c:	b292      	uxth	r2, r2
 800261e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002620:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	7b1b      	ldrb	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d120      	bne.n	8002680 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8083 	beq.w	8002772 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	88da      	ldrh	r2, [r3, #6]
 8002678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267a:	f006 f978 	bl	800896e <USB_ReadPMA>
 800267e:	e078      	b.n	8002772 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	78db      	ldrb	r3, [r3, #3]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d108      	bne.n	800269a <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800268a:	461a      	mov	r2, r3
 800268c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f919 	bl	80028c6 <HAL_PCD_EP_DB_Receive>
 8002694:	4603      	mov	r3, r0
 8002696:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002698:	e06b      	b.n	8002772 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01f      	beq.n	8002734 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800271a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800271c:	2b00      	cmp	r3, #0
 800271e:	d028      	beq.n	8002772 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	891a      	ldrh	r2, [r3, #8]
 800272c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800272e:	f006 f91e 	bl	800896e <USB_ReadPMA>
 8002732:	e01e      	b.n	8002772 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800275a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	6959      	ldr	r1, [r3, #20]
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	895a      	ldrh	r2, [r3, #10]
 800276c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800276e:	f006 f8fe 	bl	800896e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002778:	441a      	add	r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002784:	441a      	add	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <PCD_EP_ISR_Handler+0x4aa>
 8002792:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d206      	bcs.n	80027aa <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f009 fb00 	bl	800bda8 <HAL_PCD_DataOutStageCallback>
 80027a8:	e005      	b.n	80027b6 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 f928 	bl	8006a06 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d074      	beq.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 80027c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	843b      	strh	r3, [r7, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	8c3b      	ldrh	r3, [r7, #32]
 8002800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d144      	bne.n	800289e <PCD_EP_ISR_Handler+0x5ac>
 8002814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d13f      	bne.n	800289e <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4413      	add	r3, r2
 8002838:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002842:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	429a      	cmp	r2, r3
 800284c:	d906      	bls.n	800285c <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	8bfb      	ldrh	r3, [r7, #30]
 8002854:	1ad2      	subs	r2, r2, r3
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	619a      	str	r2, [r3, #24]
 800285a:	e002      	b.n	8002862 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f009 fab4 	bl	800bdde <HAL_PCD_DataInStageCallback>
 8002876:	e018      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	8bfb      	ldrh	r3, [r7, #30]
 800287e:	441a      	add	r2, r3
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	8bfb      	ldrh	r3, [r7, #30]
 800288a:	441a      	add	r2, r3
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002896:	4618      	mov	r0, r3
 8002898:	f004 f8b5 	bl	8006a06 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800289c:	e005      	b.n	80028aa <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800289e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f917 	bl	8002ad8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f6ff ad20 	blt.w	80022fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3738      	adds	r7, #56	; 0x38
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b088      	sub	sp, #32
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	4613      	mov	r3, r2
 80028d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07c      	beq.n	80029d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002902:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	8b7b      	ldrh	r3, [r7, #26]
 800290a:	429a      	cmp	r2, r3
 800290c:	d306      	bcc.n	800291c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	8b7b      	ldrh	r3, [r7, #26]
 8002914:	1ad2      	subs	r2, r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	619a      	str	r2, [r3, #24]
 800291a:	e002      	b.n	8002922 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d123      	bne.n	8002972 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	833b      	strh	r3, [r7, #24]
 8002946:	8b3b      	ldrh	r3, [r7, #24]
 8002948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800294c:	833b      	strh	r3, [r7, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	8b3b      	ldrh	r3, [r7, #24]
 800295e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296e:	b29b      	uxth	r3, r3
 8002970:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01f      	beq.n	80029bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	82fb      	strh	r3, [r7, #22]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	8afb      	ldrh	r3, [r7, #22]
 80029a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029bc:	8b7b      	ldrh	r3, [r7, #26]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8085 	beq.w	8002ace <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6959      	ldr	r1, [r3, #20]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	891a      	ldrh	r2, [r3, #8]
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	f005 ffcc 	bl	800896e <USB_ReadPMA>
 80029d6:	e07a      	b.n	8002ace <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d306      	bcc.n	8002a16 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e002      	b.n	8002a1c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d123      	bne.n	8002a6c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	83fb      	strh	r3, [r7, #30]
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
 8002a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a46:	83fb      	strh	r3, [r7, #30]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11f      	bne.n	8002ab6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	83bb      	strh	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	8bbb      	ldrh	r3, [r7, #28]
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ab6:	8b7b      	ldrh	r3, [r7, #26]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6959      	ldr	r1, [r3, #20]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	895a      	ldrh	r2, [r3, #10]
 8002ac8:	8b7b      	ldrh	r3, [r7, #26]
 8002aca:	f005 ff50 	bl	800896e <USB_ReadPMA>
    }
  }

  return count;
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0a2      	sub	sp, #136	; 0x88
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 81c5 	beq.w	8002e7c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d907      	bls.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e002      	b.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 80b9 	bne.w	8002cb8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d126      	bne.n	8002b9c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	4413      	add	r3, r2
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	00da      	lsls	r2, r3, #3
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	4413      	add	r3, r2
 8002b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	e01a      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d116      	bne.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	4413      	add	r3, r2
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00da      	lsls	r2, r3, #3
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d126      	bne.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x156>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00da      	lsls	r2, r3, #3
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4413      	add	r3, r2
 8002c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	801a      	strh	r2, [r3, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	e017      	b.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x186>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d113      	bne.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x186>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	4413      	add	r3, r2
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	00da      	lsls	r2, r3, #3
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f009 f8ba 	bl	800bdde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 82d2 	beq.w	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	827b      	strh	r3, [r7, #18]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	8a7b      	ldrh	r3, [r7, #18]
 8002ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]
 8002cb6:	e2b0      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d021      	beq.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 8284 	bne.w	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d28:	441a      	add	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d309      	bcc.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e015      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d64:	e009      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d155      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x356>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	4413      	add	r3, r2
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	00da      	lsls	r2, r3, #3
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
 8002daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d112      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	801a      	strh	r2, [r3, #0]
 8002dd4:	e047      	b.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8002dda:	d811      	bhi.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x328>
 8002ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	3301      	adds	r3, #1
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	e032      	b.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e12:	3b01      	subs	r3, #1
 8002e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	e01b      	b.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d117      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4a:	4413      	add	r3, r2
 8002e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	00da      	lsls	r2, r3, #3
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6959      	ldr	r1, [r3, #20]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	891a      	ldrh	r2, [r3, #8]
 8002e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f005 fd38 	bl	80088ea <USB_WritePMA>
 8002e7a:	e1ce      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d307      	bcc.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb8:	1ad2      	subs	r2, r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	619a      	str	r2, [r3, #24]
 8002ebe:	e002      	b.n	8002ec6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 80c4 	bne.w	8003058 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d126      	bne.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eec:	4413      	add	r3, r2
 8002eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef8:	4413      	add	r3, r2
 8002efa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	e01a      	b.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x484>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d116      	bne.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x484>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	677b      	str	r3, [r7, #116]	; 0x74
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f42:	4413      	add	r3, r2
 8002f44:	677b      	str	r3, [r7, #116]	; 0x74
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f54:	673b      	str	r3, [r7, #112]	; 0x70
 8002f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d12f      	bne.n	8002fca <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f82:	4413      	add	r3, r2
 8002f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	00da      	lsls	r2, r3, #3
 8002f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f92:	4413      	add	r3, r2
 8002f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e017      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x522>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d113      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x522>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe0:	4413      	add	r3, r2
 8002fe2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	00da      	lsls	r2, r3, #3
 8002fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fec:	4413      	add	r3, r2
 8002fee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f008 feec 	bl	800bdde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8104 	bne.w	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800304e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
 8003056:	e0e0      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 80b4 	bne.w	800321a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030ba:	441a      	add	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030c8:	441a      	add	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d309      	bcc.n	80030ee <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	1ad2      	subs	r2, r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	621a      	str	r2, [r3, #32]
 80030ec:	e015      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 80030f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003104:	e009      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	667b      	str	r3, [r7, #100]	; 0x64
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d155      	bne.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	4413      	add	r3, r2
 800313e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	4413      	add	r3, r2
 800314a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800314e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003152:	2b00      	cmp	r3, #0
 8003154:	d112      	bne.n	800317c <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003160:	b29a      	uxth	r2, r3
 8003162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003174:	b29a      	uxth	r2, r3
 8003176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e044      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x72e>
 800317c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317e:	2b3e      	cmp	r3, #62	; 0x3e
 8003180:	d811      	bhi.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8003182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	657b      	str	r3, [r7, #84]	; 0x54
 8003188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	3301      	adds	r3, #1
 8003196:	657b      	str	r3, [r7, #84]	; 0x54
 8003198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319a:	b29b      	uxth	r3, r3
 800319c:	029b      	lsls	r3, r3, #10
 800319e:	b29a      	uxth	r2, r3
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	801a      	strh	r2, [r3, #0]
 80031a4:	e02f      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x72e>
 80031a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	657b      	str	r3, [r7, #84]	; 0x54
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_PCD_EP_DB_Transmit+0x6e4>
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	3b01      	subs	r3, #1
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
 80031bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031be:	b29b      	uxth	r3, r3
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	e018      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x72e>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d114      	bne.n	8003206 <HAL_PCD_EP_DB_Transmit+0x72e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ea:	4413      	add	r3, r2
 80031ec:	667b      	str	r3, [r7, #100]	; 0x64
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00da      	lsls	r2, r3, #3
 80031f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f6:	4413      	add	r3, r2
 80031f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031fc:	663b      	str	r3, [r7, #96]	; 0x60
 80031fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003200:	b29a      	uxth	r2, r3
 8003202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003204:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	6959      	ldr	r1, [r3, #20]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	895a      	ldrh	r2, [r3, #10]
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	b29b      	uxth	r3, r3
 8003216:	f005 fb68 	bl	80088ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003234:	823b      	strh	r3, [r7, #16]
 8003236:	8a3b      	ldrh	r3, [r7, #16]
 8003238:	f083 0310 	eor.w	r3, r3, #16
 800323c:	823b      	strh	r3, [r7, #16]
 800323e:	8a3b      	ldrh	r3, [r7, #16]
 8003240:	f083 0320 	eor.w	r3, r3, #32
 8003244:	823b      	strh	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	8a3b      	ldrh	r3, [r7, #16]
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3788      	adds	r7, #136	; 0x88
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	4613      	mov	r3, r2
 8003284:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e009      	b.n	80032be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032aa:	897a      	ldrh	r2, [r7, #10]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	80da      	strh	r2, [r3, #6]
 80032d2:	e00b      	b.n	80032ec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2201      	movs	r2, #1
 80032d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800331e:	b29b      	uxth	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003332:	b29b      	uxth	r3, r3
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_PWREx_GetVoltageRange+0x18>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40007000 	.word	0x40007000

0800336c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800337c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800337e:	f000 f871 	bl	8003464 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003382:	4603      	mov	r3, r0
 8003384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003388:	d101      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e03e      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800338e:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339a:	d101      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e035      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d101      	bne.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e02f      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80033b4:	4917      	ldr	r1, [pc, #92]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	09db      	lsrs	r3, r3, #7
 80033ca:	2232      	movs	r2, #50	; 0x32
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033dc:	e002      	b.n	80033e4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f0:	d102      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f2      	bne.n	80033de <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003404:	d101      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e000      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40007000 	.word	0x40007000
 8003418:	20000000 	.word	0x20000000
 800341c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003420:	cccccccd 	.word	0xcccccccd

08003424 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800342e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003432:	6053      	str	r3, [r2, #4]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000

08003444 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800344e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003452:	6093      	str	r3, [r2, #8]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800347a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	e00a      	b.n	8003498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800348c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	e001      	b.n	8003498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003498:	687b      	ldr	r3, [r7, #4]
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40007000 	.word	0x40007000

080034ac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f000 bcd0 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c0:	4b99      	ldr	r3, [pc, #612]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ca:	4b97      	ldr	r3, [pc, #604]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80e9 	beq.w	80036b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d006      	beq.n	80034f6 <HAL_RCC_OscConfig+0x4a>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	f040 8083 	bne.w	80035f6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d17f      	bne.n	80035f6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f6:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_RCC_OscConfig+0x64>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f000 bca8 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_RCC_OscConfig+0x7e>
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003528:	e005      	b.n	8003536 <HAL_RCC_OscConfig+0x8a>
 800352a:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003536:	4293      	cmp	r3, r2
 8003538:	d224      	bcs.n	8003584 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fe70 	bl	8004224 <RCC_SetFlashLatencyFromMSIRange>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 bc88 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003550:	4b75      	ldr	r3, [pc, #468]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a74      	ldr	r2, [pc, #464]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b72      	ldr	r3, [pc, #456]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	496f      	ldr	r1, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356e:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	496a      	ldr	r1, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
 8003582:	e026      	b.n	80035d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003584:	4b68      	ldr	r3, [pc, #416]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a67      	ldr	r2, [pc, #412]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	4962      	ldr	r1, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a2:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	495d      	ldr	r1, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fe2f 	bl	8004224 <RCC_SetFlashLatencyFromMSIRange>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f000 bc47 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035d2:	f000 fe13 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x280>)
 80035da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035dc:	4b54      	ldr	r3, [pc, #336]	; (8003730 <HAL_RCC_OscConfig+0x284>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fa0d 	bl	8000a00 <HAL_InitTick>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d060      	beq.n	80036b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	f000 bc35 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d039      	beq.n	8003672 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035fe:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a49      	ldr	r2, [pc, #292]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800360a:	f7fd fa49 	bl	8000aa0 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003610:	e00f      	b.n	8003632 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003612:	f7fd fa45 	bl	8000aa0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d908      	bls.n	8003632 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003620:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	f000 bc17 	b.w	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0e9      	beq.n	8003612 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363e:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a39      	ldr	r2, [pc, #228]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	4934      	ldr	r1, [pc, #208]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800365c:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	492f      	ldr	r1, [pc, #188]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	e020      	b.n	80036b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367e:	f7fd fa0f 	bl	8000aa0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003684:	e00e      	b.n	80036a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003686:	f7fd fa0b 	bl	8000aa0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d907      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e3dd      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ea      	bne.n	8003686 <HAL_RCC_OscConfig+0x1da>
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d07e      	beq.n	80037be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x226>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d10e      	bne.n	80036ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d10b      	bne.n	80036ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06e      	beq.n	80037bc <HAL_RCC_OscConfig+0x310>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d16a      	bne.n	80037bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e3ba      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x256>
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e024      	b.n	800374c <HAL_RCC_OscConfig+0x2a0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370a:	d113      	bne.n	8003734 <HAL_RCC_OscConfig+0x288>
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a02      	ldr	r2, [pc, #8]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e012      	b.n	800374c <HAL_RCC_OscConfig+0x2a0>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	20000000 	.word	0x20000000
 8003730:	20000004 	.word	0x20000004
 8003734:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a8a      	ldr	r2, [pc, #552]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a87      	ldr	r2, [pc, #540]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d019      	beq.n	8003788 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd f9a4 	bl	8000aa0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	e00e      	b.n	800377a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fd f9a0 	bl	8000aa0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d907      	bls.n	800377a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376a:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e372      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ea      	beq.n	800375c <HAL_RCC_OscConfig+0x2b0>
 8003786:	e01a      	b.n	80037be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd f98a 	bl	8000aa0 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378e:	e00e      	b.n	80037ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd f986 	bl	8000aa0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d907      	bls.n	80037ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379e:	4b71      	ldr	r3, [pc, #452]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e358      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ae:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ea      	bne.n	8003790 <HAL_RCC_OscConfig+0x2e4>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d06c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_OscConfig+0x330>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d119      	bne.n	800380a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d116      	bne.n	800380a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	4b61      	ldr	r3, [pc, #388]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x348>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e335      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4958      	ldr	r1, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	e04c      	b.n	80038a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d029      	beq.n	8003866 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a53      	ldr	r2, [pc, #332]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd f93f 	bl	8000aa0 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	e00e      	b.n	8003844 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd f93b 	bl	8000aa0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e30d      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003844:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ea      	beq.n	8003826 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	4941      	ldr	r1, [pc, #260]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	e01e      	b.n	80038a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3e      	ldr	r2, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd f915 	bl	8000aa0 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd f911 	bl	8000aa0 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e2e3      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003898:	4b32      	ldr	r3, [pc, #200]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d062      	beq.n	8003976 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d038      	beq.n	800392a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f023 0310 	bic.w	r3, r3, #16
 80038cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80038d0:	e007      	b.n	80038e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038da:	f043 0310 	orr.w	r3, r3, #16
 80038de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e8:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd f8d5 	bl	8000aa0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f8:	e00f      	b.n	800391a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fd f8d1 	bl	8000aa0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b07      	cmp	r3, #7
 8003906:	d908      	bls.n	800391a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e2a2      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0e8      	beq.n	80038fa <HAL_RCC_OscConfig+0x44e>
 8003928:	e025      	b.n	8003976 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd f8b1 	bl	8000aa0 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	e012      	b.n	8003968 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fd f8ad 	bl	8000aa0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b07      	cmp	r3, #7
 800394e:	d90b      	bls.n	8003968 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <HAL_RCC_OscConfig+0x4b8>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e27e      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003968:	4ba8      	ldr	r3, [pc, #672]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e5      	bne.n	8003942 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 812d 	beq.w	8003bde <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003988:	4ba0      	ldr	r3, [pc, #640]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b9d      	ldr	r3, [pc, #628]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	4a9c      	ldr	r2, [pc, #624]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	4b9a      	ldr	r3, [pc, #616]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <HAL_RCC_OscConfig+0x764>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11e      	bne.n	80039fa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039bc:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x764>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a93      	ldr	r2, [pc, #588]	; (8003c10 <HAL_RCC_OscConfig+0x764>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c8:	f7fd f86a 	bl	8000aa0 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ce:	e00e      	b.n	80039ee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fd f866 	bl	8000aa0 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d907      	bls.n	80039ee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039de:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <HAL_RCC_OscConfig+0x764>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e238      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ee:	4b88      	ldr	r3, [pc, #544]	; (8003c10 <HAL_RCC_OscConfig+0x764>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ea      	beq.n	80039d0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01f      	beq.n	8003a46 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a12:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a22:	4b7a      	ldr	r3, [pc, #488]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a32:	e018      	b.n	8003a66 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a34:	4b75      	ldr	r3, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a44:	e00f      	b.n	8003a66 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a46:	4b71      	ldr	r3, [pc, #452]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d068      	beq.n	8003b40 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fd f817 	bl	8000aa0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd f813 	bl	8000aa0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d908      	bls.n	8003a9a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a88:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1e2      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e6      	beq.n	8003a76 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ab4:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a54      	ldr	r2, [pc, #336]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ac4:	e011      	b.n	8003aea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fc ffeb 	bl	8000aa0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d908      	bls.n	8003aea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1ba      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003aea:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0e6      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x61a>
 8003af8:	e068      	b.n	8003bcc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b0a:	e011      	b.n	8003b30 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fc ffc8 	bl	8000aa0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e197      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e6      	bne.n	8003b0c <HAL_RCC_OscConfig+0x660>
 8003b3e:	e045      	b.n	8003bcc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fc ffae 	bl	8000aa0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b46:	e011      	b.n	8003b6c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fc ffaa 	bl	8000aa0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e179      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d021      	beq.n	8003bcc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b98:	e011      	b.n	8003bbe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fc ff81 	bl	8000aa0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d908      	bls.n	8003bbe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e150      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04f      	beq.n	8003c8a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_RCC_OscConfig+0x760>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fc ff4d 	bl	8000aa0 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x788>
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c14:	f7fc ff44 	bl	8000aa0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d908      	bls.n	8003c34 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c22:	4b91      	ldr	r3, [pc, #580]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e115      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c34:	4b8c      	ldr	r3, [pc, #560]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0e8      	beq.n	8003c14 <HAL_RCC_OscConfig+0x768>
 8003c42:	e022      	b.n	8003c8a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c4a:	4a87      	ldr	r2, [pc, #540]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fc ff24 	bl	8000aa0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c5a:	e00f      	b.n	8003c7c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c5c:	f7fc ff20 	bl	8000aa0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d908      	bls.n	8003c7c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0f1      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c7c:	4b7a      	ldr	r3, [pc, #488]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e8      	bne.n	8003c5c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80e5 	beq.w	8003e5e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c94:	4b74      	ldr	r3, [pc, #464]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	f000 809f 	beq.w	8003de0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d166      	bne.n	8003d78 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fc fef3 	bl	8000aa0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbc:	e00e      	b.n	8003cdc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fc feef 	bl	8000aa0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d907      	bls.n	8003cdc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0c1      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cdc:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ea      	bne.n	8003cbe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce8:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <HAL_RCC_OscConfig+0x9c0>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d02:	0212      	lsls	r2, r2, #8
 8003d04:	4311      	orrs	r1, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d0a:	0852      	lsrs	r2, r2, #1
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0552      	lsls	r2, r2, #21
 8003d10:	4311      	orrs	r1, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d16:	0852      	lsrs	r2, r2, #1
 8003d18:	3a01      	subs	r2, #1
 8003d1a:	0652      	lsls	r2, r2, #25
 8003d1c:	4311      	orrs	r1, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d22:	06d2      	lsls	r2, r2, #27
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4950      	ldr	r1, [pc, #320]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b4e      	ldr	r3, [pc, #312]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a4d      	ldr	r2, [pc, #308]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a4a      	ldr	r2, [pc, #296]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fc feac 	bl	8000aa0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4a:	e00e      	b.n	8003d6a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fc fea8 	bl	8000aa0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d907      	bls.n	8003d6a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e07a      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ea      	beq.n	8003d4c <HAL_RCC_OscConfig+0x8a0>
 8003d76:	e072      	b.n	8003e5e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3a      	ldr	r2, [pc, #232]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a34      	ldr	r2, [pc, #208]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d9c:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a31      	ldr	r2, [pc, #196]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003da2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fc fe78 	bl	8000aa0 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db2:	e00e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fc fe74 	bl	8000aa0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d907      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc2:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e046      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ea      	bne.n	8003db4 <HAL_RCC_OscConfig+0x908>
 8003dde:	e03e      	b.n	8003e5e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e039      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_OscConfig+0x9bc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0203 	and.w	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d12c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d123      	bne.n	8003e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d11b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d113      	bne.n	8003e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	3b01      	subs	r3, #1
 8003e54:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	019f800c 	.word	0x019f800c

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e10d      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b88      	ldr	r3, [pc, #544]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b85      	ldr	r3, [pc, #532]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	4983      	ldr	r1, [pc, #524]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b81      	ldr	r3, [pc, #516]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0f5      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8094 	beq.w	8003fee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d134      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b78      	ldr	r3, [pc, #480]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0e2      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ede:	f000 fa05 	bl	80042ec <RCC_GetSysClockFreqFromPLLSource>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4a73      	ldr	r2, [pc, #460]	; (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d956      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003eec:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ef8:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e045      	b.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03f      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d13b      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2a:	4a61      	ldr	r2, [pc, #388]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e030      	b.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0a9      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f58:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09d      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f68:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e095      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f78:	f000 f8a2 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4a4c      	ldr	r2, [pc, #304]	; (80040b4 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d909      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8e:	4a48      	ldr	r2, [pc, #288]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4942      	ldr	r1, [pc, #264]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fc fd78 	bl	8000aa0 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e013      	b.n	8003fdc <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fc fd74 	bl	8000aa0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d90a      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e063      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 020c 	and.w	r2, r3, #12
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d1e2      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	492a      	ldr	r1, [pc, #168]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]
 800400c:	e008      	b.n	8004020 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d105      	bne.n	8004020 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d210      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 020f 	bic.w	r2, r3, #15
 8004036:	491d      	ldr	r1, [pc, #116]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_ClockConfig+0x23c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e029      	b.n	80040a4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4911      	ldr	r1, [pc, #68]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4909      	ldr	r1, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x240>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800408e:	f000 f8b5 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004092:	4603      	mov	r3, r0
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <HAL_RCC_ClockConfig+0x248>)
 8004096:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCC_ClockConfig+0x24c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc fcaf 	bl	8000a00 <HAL_InitTick>
 80040a2:	4603      	mov	r3, r0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40021000 	.word	0x40021000
 80040b4:	04c4b400 	.word	0x04c4b400
 80040b8:	20000000 	.word	0x20000000
 80040bc:	20000004 	.word	0x20000004

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	4b44      	ldr	r3, [pc, #272]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x34>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d121      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d11e      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040f4:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004100:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	e005      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004110:	4b36      	ldr	r3, [pc, #216]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800411c:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x130>)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d102      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004138:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e004      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d101      	bne.n	8004148 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004146:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d146      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3301      	adds	r3, #1
 8004164:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d003      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xb4>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d00d      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0xce>
 8004172:	e019      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 800417e:	68d2      	ldr	r2, [r2, #12]
 8004180:	0a12      	lsrs	r2, r2, #8
 8004182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	617b      	str	r3, [r7, #20]
        break;
 800418c:	e019      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 8004198:	68d2      	ldr	r2, [r2, #12]
 800419a:	0a12      	lsrs	r2, r2, #8
 800419c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a0:	fb02 f303 	mul.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
        break;
 80041a6:	e00c      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80041b2:	68d2      	ldr	r2, [r2, #12]
 80041b4:	0a12      	lsrs	r2, r2, #8
 80041b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_GetSysClockFreq+0x12c>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0e5b      	lsrs	r3, r3, #25
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	3301      	adds	r3, #1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041dc:	69bb      	ldr	r3, [r7, #24]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800c408 	.word	0x0800c408
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	01e84800 	.word	0x01e84800

080041fc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004200:	f7ff ff5e 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetHCLKFreq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetHCLKFreq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	0800c3f8 	.word	0x0800c3f8

08004224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800423c:	f7ff f888 	bl	8003350 <HAL_PWREx_GetVoltageRange>
 8004240:	6138      	str	r0, [r7, #16]
 8004242:	e014      	b.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800425c:	f7ff f878 	bl	8003350 <HAL_PWREx_GetVoltageRange>
 8004260:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427a:	d10b      	bne.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d919      	bls.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2ba0      	cmp	r3, #160	; 0xa0
 8004286:	d902      	bls.n	800428e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004288:	2302      	movs	r3, #2
 800428a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800428c:	e013      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800428e:	2301      	movs	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004292:	e010      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d902      	bls.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800429a:	2303      	movs	r3, #3
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e00a      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d102      	bne.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042a6:	2302      	movs	r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e004      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b70      	cmp	r3, #112	; 0x70
 80042b0:	d101      	bne.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40022000 	.word	0x40022000

080042ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d118      	bne.n	8004334 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800430e:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e005      	b.n	800432a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004332:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	3301      	adds	r3, #1
 800434a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d003      	beq.n	800435a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d00d      	beq.n	8004374 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8004358:	e019      	b.n	800438e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	0a12      	lsrs	r2, r2, #8
 8004368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
      break;
 8004372:	e019      	b.n	80043a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800437e:	68d2      	ldr	r2, [r2, #12]
 8004380:	0a12      	lsrs	r2, r2, #8
 8004382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	613b      	str	r3, [r7, #16]
      break;
 800438c:	e00c      	b.n	80043a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	0a12      	lsrs	r2, r2, #8
 800439c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	613b      	str	r3, [r7, #16]
      break;
 80043a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0e5b      	lsrs	r3, r3, #25
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80043c2:	683b      	ldr	r3, [r7, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40021000 	.word	0x40021000
 80043d4:	0800c408 	.word	0x0800c408
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	01e84800 	.word	0x01e84800

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043ec:	2300      	movs	r3, #0
 80043ee:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d040      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d02a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d825      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d026      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d821      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d006      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d81d      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d010      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004420:	e018      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004422:	4b8f      	ldr	r3, [pc, #572]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	4a8e      	ldr	r2, [pc, #568]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800442e:	e015      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fb56 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004440:	e00c      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3320      	adds	r3, #32
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fc33 	bl	8004cb4 <RCCEx_PLLSAI2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
        break;
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800445a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445c:	7ffb      	ldrb	r3, [r7, #31]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004462:	4b7f      	ldr	r3, [pc, #508]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004468:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	497b      	ldr	r1, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004478:	e001      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d047      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d030      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d82a      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d02a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a4:	d824      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044aa:	d008      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xde>
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b0:	d81e      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80044b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ba:	d010      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80044bc:	e018      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044be:	4b68      	ldr	r3, [pc, #416]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	4a67      	ldr	r2, [pc, #412]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044ca:	e015      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb08 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044dc:	e00c      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3320      	adds	r3, #32
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fbe5 	bl	8004cb4 <RCCEx_PLLSAI2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	77fb      	strb	r3, [r7, #31]
        break;
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80044f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f8:	7ffb      	ldrb	r3, [r7, #31]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4954      	ldr	r1, [pc, #336]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004514:	e001      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80ab 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452c:	4b4c      	ldr	r3, [pc, #304]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10d      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	4a48      	ldr	r2, [pc, #288]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6593      	str	r3, [r2, #88]	; 0x58
 8004544:	4b46      	ldr	r3, [pc, #280]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004554:	4b43      	ldr	r3, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a42      	ldr	r2, [pc, #264]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004560:	f7fc fa9e 	bl	8000aa0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004566:	e00f      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fc fa9a 	bl	8000aa0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d908      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004576:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004586:	e006      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004588:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0e9      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004596:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004598:	7ffb      	ldrb	r3, [r7, #31]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d164      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d019      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01f      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fc fa51 	bl	8000aa0 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004600:	e012      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fc fa4d 	bl	8000aa0 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d909      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004626:	e007      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0e5      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004638:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800465a:	7ffb      	ldrb	r3, [r7, #31]
 800465c:	77bb      	strb	r3, [r7, #30]
 800465e:	e005      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7ffb      	ldrb	r3, [r7, #31]
 800466a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b9c      	ldr	r3, [pc, #624]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	4a9b      	ldr	r2, [pc, #620]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468a:	4b96      	ldr	r3, [pc, #600]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f023 0203 	bic.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	4992      	ldr	r1, [pc, #584]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ac:	4b8d      	ldr	r3, [pc, #564]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 020c 	bic.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	498a      	ldr	r1, [pc, #552]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ce:	4b85      	ldr	r3, [pc, #532]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	4981      	ldr	r1, [pc, #516]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f0:	4b7c      	ldr	r3, [pc, #496]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4979      	ldr	r1, [pc, #484]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004712:	4b74      	ldr	r3, [pc, #464]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	4970      	ldr	r1, [pc, #448]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004742:	4968      	ldr	r1, [pc, #416]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004756:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004764:	495f      	ldr	r1, [pc, #380]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	4957      	ldr	r1, [pc, #348]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800479a:	4b52      	ldr	r3, [pc, #328]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a8:	494e      	ldr	r1, [pc, #312]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d031      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c4:	d00e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80047c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ca:	d814      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d6:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80047e2:	e00c      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f97c 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	77fb      	strb	r3, [r7, #31]
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004804:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004812:	4934      	ldr	r1, [pc, #208]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800481a:	e001      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7ffb      	ldrb	r3, [r7, #31]
 800481e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800482c:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	492a      	ldr	r1, [pc, #168]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800484e:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	4919      	ldr	r1, [pc, #100]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4910      	ldr	r1, [pc, #64]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d2:	d109      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a02      	ldr	r2, [pc, #8]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048de:	60d3      	str	r3, [r2, #12]
 80048e0:	e014      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	2101      	movs	r1, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f8f5 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004902:	7ffb      	ldrb	r3, [r7, #31]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004908:	7ffb      	ldrb	r3, [r7, #31]
 800490a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d04a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004920:	d108      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004922:	4b70      	ldr	r3, [pc, #448]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800492a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004932:	e012      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004934:	4b6b      	ldr	r3, [pc, #428]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004942:	4968      	ldr	r1, [pc, #416]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800494a:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800494c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004950:	4a64      	ldr	r2, [pc, #400]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004956:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004962:	d10d      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f8bc 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	77bb      	strb	r3, [r7, #30]
 800497e:	e016      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004988:	d106      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498a:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004994:	60d3      	str	r3, [r2, #12]
 8004996:	e00a      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a0:	d105      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049a2:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a4f      	ldr	r2, [pc, #316]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c8:	4946      	ldr	r1, [pc, #280]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049da:	4b42      	ldr	r3, [pc, #264]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4a41      	ldr	r2, [pc, #260]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e4:	60d3      	str	r3, [r2, #12]
 80049e6:	e011      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f875 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a28:	492e      	ldr	r1, [pc, #184]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f850 	bl	8004ae8 <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
 8004a54:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a68:	f023 0204 	bic.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a72:	491c      	ldr	r1, [pc, #112]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a86:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a8c:	f023 0218 	bic.w	r2, r3, #24
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aba:	490a      	ldr	r1, [pc, #40]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004acc:	d105      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004ada:	7fbb      	ldrb	r3, [r7, #30]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d018      	beq.n	8004b30 <RCCEx_PLLSAI1_Config+0x48>
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d81f      	bhi.n	8004b42 <RCCEx_PLLSAI1_Config+0x5a>
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d002      	beq.n	8004b0c <RCCEx_PLLSAI1_Config+0x24>
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d009      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x36>
 8004b0a:	e01a      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0c:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d117      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1c:	e014      	b.n	8004b48 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b1e:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d110      	bne.n	8004b4c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2e:	e00d      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004b30:	4b5c      	ldr	r3, [pc, #368]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b40:	e006      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      break;
 8004b46:	e004      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b50:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 809f 	bne.w	8004c98 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b5a:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a51      	ldr	r2, [pc, #324]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b66:	f7fb ff9b 	bl	8000aa0 <HAL_GetTick>
 8004b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b6c:	e00f      	b.n	8004b8e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b6e:	f7fb ff97 	bl	8000aa0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d908      	bls.n	8004b8e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b7c:	4b49      	ldr	r3, [pc, #292]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b8c:	e006      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b8e:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e9      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x86>
 8004b9a:	e000      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004b9c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d179      	bne.n	8004c98 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	0211      	lsls	r1, r2, #8
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68d2      	ldr	r2, [r2, #12]
 8004bbc:	06d2      	lsls	r2, r2, #27
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6852      	ldr	r2, [r2, #4]
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	610b      	str	r3, [r1, #16]
 8004bd6:	e033      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d118      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	4b32      	ldr	r3, [pc, #200]	; (8004cac <RCCEx_PLLSAI1_Config+0x1c4>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6892      	ldr	r2, [r2, #8]
 8004bea:	0211      	lsls	r1, r2, #8
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6912      	ldr	r2, [r2, #16]
 8004bf0:	0852      	lsrs	r2, r2, #1
 8004bf2:	3a01      	subs	r2, #1
 8004bf4:	0552      	lsls	r2, r2, #21
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6852      	ldr	r2, [r2, #4]
 8004bfc:	3a01      	subs	r2, #1
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	4311      	orrs	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	4926      	ldr	r1, [pc, #152]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
 8004c0e:	e017      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6892      	ldr	r2, [r2, #8]
 8004c1c:	0211      	lsls	r1, r2, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6952      	ldr	r2, [r2, #20]
 8004c22:	0852      	lsrs	r2, r2, #1
 8004c24:	3a01      	subs	r2, #1
 8004c26:	0652      	lsls	r2, r2, #25
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	491a      	ldr	r1, [pc, #104]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c40:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fb ff28 	bl	8000aa0 <HAL_GetTick>
 8004c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c52:	e00f      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c54:	f7fb ff24 	bl	8000aa0 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d908      	bls.n	8004c74 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004c72:	e006      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0e9      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x16c>
 8004c80:	e000      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004c82:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	07ff800c 	.word	0x07ff800c
 8004cac:	ff9f800c 	.word	0xff9f800c
 8004cb0:	f9ff800c 	.word	0xf9ff800c

08004cb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI2_Config+0x48>
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d81f      	bhi.n	8004d0e <RCCEx_PLLSAI2_Config+0x5a>
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d002      	beq.n	8004cd8 <RCCEx_PLLSAI2_Config+0x24>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d009      	beq.n	8004cea <RCCEx_PLLSAI2_Config+0x36>
 8004cd6:	e01a      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cd8:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d117      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e014      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cea:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfa:	e00d      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004cfc:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0c:	e006      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
      break;
 8004d12:	e004      	b.n	8004d1e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d14:	bf00      	nop
 8004d16:	e002      	b.n	8004d1e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d169      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d24:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fb feb6 	bl	8000aa0 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d36:	e00f      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d38:	f7fb feb2 	bl	8000aa0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d908      	bls.n	8004d58 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d56:	e006      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e9      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x84>
 8004d64:	e000      	b.n	8004d68 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004d66:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d144      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d115      	bne.n	8004da0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <RCCEx_PLLSAI2_Config+0x154>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	06d2      	lsls	r2, r2, #27
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6852      	ldr	r2, [r2, #4]
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	491a      	ldr	r1, [pc, #104]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da0:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fb fe78 	bl	8000aa0 <HAL_GetTick>
 8004db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db2:	e00f      	b.n	8004dd4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db4:	f7fb fe74 	bl	8000aa0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d908      	bls.n	8004dd4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004dd2:	e006      	b.n	8004de2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0e9      	beq.n	8004db4 <RCCEx_PLLSAI2_Config+0x100>
 8004de0:	e000      	b.n	8004de4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004de2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	4904      	ldr	r1, [pc, #16]	; (8004e04 <RCCEx_PLLSAI2_Config+0x150>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	07ff800c 	.word	0x07ff800c

08004e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e049      	b.n	8004eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fb fc54 	bl	80006e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f000 fb72 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e049      	b.n	8004f60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f841 	bl	8004f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 fb1b 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_TIM_PWM_Start+0x24>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e03c      	b.n	800501a <HAL_TIM_PWM_Start+0x9e>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d109      	bne.n	8004fba <HAL_TIM_PWM_Start+0x3e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	bf14      	ite	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	2300      	moveq	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e02f      	b.n	800501a <HAL_TIM_PWM_Start+0x9e>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d109      	bne.n	8004fd4 <HAL_TIM_PWM_Start+0x58>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	e022      	b.n	800501a <HAL_TIM_PWM_Start+0x9e>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d109      	bne.n	8004fee <HAL_TIM_PWM_Start+0x72>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e015      	b.n	800501a <HAL_TIM_PWM_Start+0x9e>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_PWM_Start+0x8c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e008      	b.n	800501a <HAL_TIM_PWM_Start+0x9e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e09c      	b.n	800515c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <HAL_TIM_PWM_Start+0xb6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005030:	e023      	b.n	800507a <HAL_TIM_PWM_Start+0xfe>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d104      	bne.n	8005042 <HAL_TIM_PWM_Start+0xc6>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005040:	e01b      	b.n	800507a <HAL_TIM_PWM_Start+0xfe>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Start+0xd6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	e013      	b.n	800507a <HAL_TIM_PWM_Start+0xfe>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0xe6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005060:	e00b      	b.n	800507a <HAL_TIM_PWM_Start+0xfe>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b10      	cmp	r3, #16
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xf6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005070:	e003      	b.n	800507a <HAL_TIM_PWM_Start+0xfe>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fe62 	bl	8005d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a35      	ldr	r2, [pc, #212]	; (8005164 <HAL_TIM_PWM_Start+0x1e8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_TIM_PWM_Start+0x13e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a34      	ldr	r2, [pc, #208]	; (8005168 <HAL_TIM_PWM_Start+0x1ec>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIM_PWM_Start+0x13e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a32      	ldr	r2, [pc, #200]	; (800516c <HAL_TIM_PWM_Start+0x1f0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIM_PWM_Start+0x13e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a31      	ldr	r2, [pc, #196]	; (8005170 <HAL_TIM_PWM_Start+0x1f4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_PWM_Start+0x13e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <HAL_TIM_PWM_Start+0x1f8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Start+0x142>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_PWM_Start+0x144>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_PWM_Start+0x1e8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01d      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d018      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_TIM_PWM_Start+0x1fc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIM_PWM_Start+0x200>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_TIM_PWM_Start+0x204>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <HAL_TIM_PWM_Start+0x1ec>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIM_PWM_Start+0x19e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <HAL_TIM_PWM_Start+0x1f0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d115      	bne.n	8005146 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_TIM_PWM_Start+0x208>)
 8005122:	4013      	ands	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b06      	cmp	r3, #6
 800512a:	d015      	beq.n	8005158 <HAL_TIM_PWM_Start+0x1dc>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d011      	beq.n	8005158 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	e008      	b.n	8005158 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e000      	b.n	800515a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	00010007 	.word	0x00010007

08005188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800519e:	2302      	movs	r3, #2
 80051a0:	e0fd      	b.n	800539e <HAL_TIM_PWM_ConfigChannel+0x216>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b14      	cmp	r3, #20
 80051ae:	f200 80f0 	bhi.w	8005392 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005393 	.word	0x08005393
 80051c0:	08005393 	.word	0x08005393
 80051c4:	08005393 	.word	0x08005393
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	08005393 	.word	0x08005393
 80051d0:	08005393 	.word	0x08005393
 80051d4:	08005393 	.word	0x08005393
 80051d8:	0800528f 	.word	0x0800528f
 80051dc:	08005393 	.word	0x08005393
 80051e0:	08005393 	.word	0x08005393
 80051e4:	08005393 	.word	0x08005393
 80051e8:	080052cf 	.word	0x080052cf
 80051ec:	08005393 	.word	0x08005393
 80051f0:	08005393 	.word	0x08005393
 80051f4:	08005393 	.word	0x08005393
 80051f8:	08005311 	.word	0x08005311
 80051fc:	08005393 	.word	0x08005393
 8005200:	08005393 	.word	0x08005393
 8005204:	08005393 	.word	0x08005393
 8005208:	08005351 	.word	0x08005351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fa28 	bl	8005668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0208 	orr.w	r2, r2, #8
 8005226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0204 	bic.w	r2, r2, #4
 8005236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6999      	ldr	r1, [r3, #24]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	619a      	str	r2, [r3, #24]
      break;
 800524a:	e0a3      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fa98 	bl	8005788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	021a      	lsls	r2, r3, #8
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
      break;
 800528c:	e082      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fb01 	bl	800589c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0208 	orr.w	r2, r2, #8
 80052a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0204 	bic.w	r2, r2, #4
 80052b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	61da      	str	r2, [r3, #28]
      break;
 80052cc:	e062      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fb69 	bl	80059ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	61da      	str	r2, [r3, #28]
      break;
 800530e:	e041      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fbb2 	bl	8005a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800534e:	e021      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fbf6 	bl	8005b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	021a      	lsls	r2, r3, #8
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005390:	e000      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop

080053a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_ConfigClockSource+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e0b5      	b.n	800552c <HAL_TIM_ConfigClockSource+0x184>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80053de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fc:	d03e      	beq.n	800547c <HAL_TIM_ConfigClockSource+0xd4>
 80053fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005402:	f200 8087 	bhi.w	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	f000 8085 	beq.w	8005518 <HAL_TIM_ConfigClockSource+0x170>
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005412:	d87f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b70      	cmp	r3, #112	; 0x70
 8005416:	d01a      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xa6>
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d87b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b60      	cmp	r3, #96	; 0x60
 800541e:	d050      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d877      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b50      	cmp	r3, #80	; 0x50
 8005426:	d03c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d873      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d058      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d86f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b30      	cmp	r3, #48	; 0x30
 8005436:	d064      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d86b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b20      	cmp	r3, #32
 800543e:	d060      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005440:	2b20      	cmp	r3, #32
 8005442:	d867      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d05c      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d05a      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800544c:	e062      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f000 fc55 	bl	8005d0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005470:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	609a      	str	r2, [r3, #8]
      break;
 800547a:	e04e      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6899      	ldr	r1, [r3, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f000 fc3e 	bl	8005d0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800549e:	609a      	str	r2, [r3, #8]
      break;
 80054a0:	e03b      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 fbb0 	bl	8005c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2150      	movs	r1, #80	; 0x50
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fc09 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 80054c0:	e02b      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 fbcf 	bl	8005c72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2160      	movs	r1, #96	; 0x60
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fbf9 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 80054e0:	e01b      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 fb90 	bl	8005c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fbe9 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005500:	e00b      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f000 fbe0 	bl	8005cd2 <TIM_ITRx_SetConfig>
        break;
 8005512:	e002      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005518:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <TIM_Base_SetConfig+0x118>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3c      	ldr	r2, [pc, #240]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <TIM_Base_SetConfig+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a3a      	ldr	r2, [pc, #232]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <TIM_Base_SetConfig+0x114>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d01b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2c      	ldr	r2, [pc, #176]	; (800564c <TIM_Base_SetConfig+0x118>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d017      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <TIM_Base_SetConfig+0x11c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <TIM_Base_SetConfig+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a29      	ldr	r2, [pc, #164]	; (8005658 <TIM_Base_SetConfig+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a28      	ldr	r2, [pc, #160]	; (800565c <TIM_Base_SetConfig+0x128>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a27      	ldr	r2, [pc, #156]	; (8005660 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a26      	ldr	r2, [pc, #152]	; (8005664 <TIM_Base_SetConfig+0x130>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <TIM_Base_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <TIM_Base_SetConfig+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <TIM_Base_SetConfig+0x128>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a10      	ldr	r2, [pc, #64]	; (8005660 <TIM_Base_SetConfig+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <TIM_Base_SetConfig+0x130>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 0302 	bic.w	r3, r3, #2
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2c      	ldr	r2, [pc, #176]	; (8005774 <TIM_OC1_SetConfig+0x10c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_OC1_SetConfig+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <TIM_OC1_SetConfig+0x110>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_OC1_SetConfig+0x80>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2a      	ldr	r2, [pc, #168]	; (800577c <TIM_OC1_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_OC1_SetConfig+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <TIM_OC1_SetConfig+0x118>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC1_SetConfig+0x80>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a28      	ldr	r2, [pc, #160]	; (8005784 <TIM_OC1_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10c      	bne.n	8005702 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <TIM_OC1_SetConfig+0x10c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_OC1_SetConfig+0xc2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <TIM_OC1_SetConfig+0x110>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_OC1_SetConfig+0xc2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <TIM_OC1_SetConfig+0x114>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC1_SetConfig+0xc2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <TIM_OC1_SetConfig+0x118>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC1_SetConfig+0xc2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a17      	ldr	r2, [pc, #92]	; (8005784 <TIM_OC1_SetConfig+0x11c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800

08005788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a28      	ldr	r2, [pc, #160]	; (8005888 <TIM_OC2_SetConfig+0x100>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0x6c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <TIM_OC2_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10d      	bne.n	8005810 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <TIM_OC2_SetConfig+0x100>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00f      	beq.n	8005838 <TIM_OC2_SetConfig+0xb0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <TIM_OC2_SetConfig+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_OC2_SetConfig+0xb0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <TIM_OC2_SetConfig+0x108>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_OC2_SetConfig+0xb0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <TIM_OC2_SetConfig+0x10c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <TIM_OC2_SetConfig+0x110>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d113      	bne.n	8005860 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800

0800589c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <TIM_OC3_SetConfig+0xfc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x6a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <TIM_OC3_SetConfig+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <TIM_OC3_SetConfig+0xfc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_OC3_SetConfig+0xae>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC3_SetConfig+0x100>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_OC3_SetConfig+0xae>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC3_SetConfig+0x104>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_OC3_SetConfig+0xae>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC3_SetConfig+0x108>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC3_SetConfig+0xae>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <TIM_OC3_SetConfig+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <TIM_OC4_SetConfig+0xc0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_OC4_SetConfig+0x84>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <TIM_OC4_SetConfig+0xc4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_OC4_SetConfig+0x84>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <TIM_OC4_SetConfig+0xc8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC4_SetConfig+0x84>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC4_SetConfig+0xcc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC4_SetConfig+0x84>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <TIM_OC4_SetConfig+0xd0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d109      	bne.n	8005a44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800

08005a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <TIM_OC5_SetConfig+0xb4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00f      	beq.n	8005afa <TIM_OC5_SetConfig+0x7a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC5_SetConfig+0xb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <TIM_OC5_SetConfig+0x7a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <TIM_OC5_SetConfig+0xbc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <TIM_OC5_SetConfig+0x7a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <TIM_OC5_SetConfig+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC5_SetConfig+0x7a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <TIM_OC5_SetConfig+0xc4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d109      	bne.n	8005b0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	621a      	str	r2, [r3, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	051b      	lsls	r3, r3, #20
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <TIM_OC6_SetConfig+0xb8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <TIM_OC6_SetConfig+0xbc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x7c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <TIM_OC6_SetConfig+0xc0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x7c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <TIM_OC6_SetConfig+0xc4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC6_SetConfig+0x7c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <TIM_OC6_SetConfig+0xc8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d109      	bne.n	8005bd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800

08005c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 030a 	bic.w	r3, r3, #10
 8005c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b087      	sub	sp, #28
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f023 0210 	bic.w	r2, r3, #16
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	031b      	lsls	r3, r3, #12
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f043 0307 	orr.w	r3, r3, #7
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2201      	movs	r2, #1
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	401a      	ands	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	fa01 f303 	lsl.w	r3, r1, r3
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e068      	b.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2e      	ldr	r2, [pc, #184]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d108      	bne.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d01d      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e22:	d018      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10c      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40014000 	.word	0x40014000

08005ea8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eb8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ebc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ede:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ee2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	f107 0014 	add.w	r0, r7, #20
 8005f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	b004      	add	sp, #16
 8005f4c:	4770      	bx	lr
	...

08005f50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b09b      	sub	sp, #108	; 0x6c
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	78db      	ldrb	r3, [r3, #3]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d81f      	bhi.n	8005fc2 <USB_ActivateEndpoint+0x72>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <USB_ActivateEndpoint+0x38>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fcb 	.word	0x08005fcb
 8005f94:	08005fa7 	.word	0x08005fa7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fa4:	e012      	b.n	8005fcc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005fa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005faa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005fae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fb2:	e00b      	b.n	8005fcc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fc0:	e004      	b.n	8005fcc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005fc8:	e000      	b.n	8005fcc <USB_ActivateEndpoint+0x7c>
      break;
 8005fca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	b21a      	sxth	r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b21b      	sxth	r3, r3
 800600e:	4313      	orrs	r3, r2
 8006010:	b21b      	sxth	r3, r3
 8006012:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	7b1b      	ldrb	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 8149 	bne.w	80062d4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8084 	beq.w	8006154 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00da      	lsls	r2, r3, #3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	88db      	ldrh	r3, [r3, #6]
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	81fb      	strh	r3, [r7, #14]
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01b      	beq.n	80060d0 <USB_ActivateEndpoint+0x180>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	81bb      	strh	r3, [r7, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	89bb      	ldrh	r3, [r7, #12]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	78db      	ldrb	r3, [r3, #3]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d020      	beq.n	800611a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	813b      	strh	r3, [r7, #8]
 80060f0:	893b      	ldrh	r3, [r7, #8]
 80060f2:	f083 0320 	eor.w	r3, r3, #32
 80060f6:	813b      	strh	r3, [r7, #8]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	893b      	ldrh	r3, [r7, #8]
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
 8006118:	e27f      	b.n	800661a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	817b      	strh	r3, [r7, #10]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	897b      	ldrh	r3, [r7, #10]
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
 8006152:	e262      	b.n	800661a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	4413      	add	r3, r2
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	00da      	lsls	r2, r3, #3
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	4413      	add	r3, r2
 8006172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	88db      	ldrh	r3, [r3, #6]
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	4413      	add	r3, r2
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	00da      	lsls	r2, r3, #3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d112      	bne.n	80061da <USB_ActivateEndpoint+0x28a>
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e02f      	b.n	800623a <USB_ActivateEndpoint+0x2ea>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b3e      	cmp	r3, #62	; 0x3e
 80061e0:	d813      	bhi.n	800620a <USB_ActivateEndpoint+0x2ba>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <USB_ActivateEndpoint+0x2ac>
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	3301      	adds	r3, #1
 80061fa:	663b      	str	r3, [r7, #96]	; 0x60
 80061fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fe:	b29b      	uxth	r3, r3
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	b29a      	uxth	r2, r3
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e017      	b.n	800623a <USB_ActivateEndpoint+0x2ea>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	663b      	str	r3, [r7, #96]	; 0x60
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <USB_ActivateEndpoint+0x2d4>
 800621e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006220:	3b01      	subs	r3, #1
 8006222:	663b      	str	r3, [r7, #96]	; 0x60
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	83fb      	strh	r3, [r7, #30]
 8006248:	8bfb      	ldrh	r3, [r7, #30]
 800624a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01b      	beq.n	800628a <USB_ActivateEndpoint+0x33a>
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006268:	83bb      	strh	r3, [r7, #28]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	441a      	add	r2, r3
 8006274:	8bbb      	ldrh	r3, [r7, #28]
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a0:	837b      	strh	r3, [r7, #26]
 80062a2:	8b7b      	ldrh	r3, [r7, #26]
 80062a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a8:	837b      	strh	r3, [r7, #26]
 80062aa:	8b7b      	ldrh	r3, [r7, #26]
 80062ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062b0:	837b      	strh	r3, [r7, #26]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	8b7b      	ldrh	r3, [r7, #26]
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]
 80062d2:	e1a2      	b.n	800661a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80062fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006304:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630c:	b29b      	uxth	r3, r3
 800630e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	65bb      	str	r3, [r7, #88]	; 0x58
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006320:	4413      	add	r3, r2
 8006322:	65bb      	str	r3, [r7, #88]	; 0x58
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	00da      	lsls	r2, r3, #3
 800632a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632c:	4413      	add	r3, r2
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	657b      	str	r3, [r7, #84]	; 0x54
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	653b      	str	r3, [r7, #80]	; 0x50
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006354:	4413      	add	r3, r2
 8006356:	653b      	str	r3, [r7, #80]	; 0x50
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	4413      	add	r3, r2
 8006362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	b29b      	uxth	r3, r3
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006376:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 8091 	bne.w	80064a4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006390:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01b      	beq.n	80063d2 <USB_ActivateEndpoint+0x482>
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	441a      	add	r2, r3
 80063bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	873b      	strh	r3, [r7, #56]	; 0x38
 80063e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01b      	beq.n	8006422 <USB_ActivateEndpoint+0x4d2>
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006400:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	86bb      	strh	r3, [r7, #52]	; 0x34
 800643a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800643c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006440:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006442:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006444:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006448:	86bb      	strh	r3, [r7, #52]	; 0x34
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006480:	867b      	strh	r3, [r7, #50]	; 0x32
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e0ba      	b.n	800661a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80064b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01d      	beq.n	80064fc <USB_ActivateEndpoint+0x5ac>
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800650c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01d      	beq.n	8006554 <USB_ActivateEndpoint+0x604>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	441a      	add	r2, r3
 800653c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	78db      	ldrb	r3, [r3, #3]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d024      	beq.n	80065a6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006572:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006576:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800657a:	f083 0320 	eor.w	r3, r3, #32
 800657e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]
 80065a4:	e01d      	b.n	80065e2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800661a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800661e:	4618      	mov	r0, r3
 8006620:	376c      	adds	r7, #108	; 0x6c
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop

0800662c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b08d      	sub	sp, #52	; 0x34
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	7b1b      	ldrb	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 808e 	bne.w	800675c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d044      	beq.n	80066d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	81bb      	strh	r3, [r7, #12]
 8006656:	89bb      	ldrh	r3, [r7, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <USB_DeactivateEndpoint+0x6c>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	817b      	strh	r3, [r7, #10]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ae:	813b      	strh	r3, [r7, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	893b      	ldrh	r3, [r7, #8]
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]
 80066d0:	e192      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	827b      	strh	r3, [r7, #18]
 80066e0:	8a7b      	ldrh	r3, [r7, #18]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <USB_DeactivateEndpoint+0xf6>
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	823b      	strh	r3, [r7, #16]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	8a3b      	ldrh	r3, [r7, #16]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	81fb      	strh	r3, [r7, #14]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
 800675a:	e14d      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 80a5 	bne.w	80068b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	843b      	strh	r3, [r7, #32]
 8006774:	8c3b      	ldrh	r3, [r7, #32]
 8006776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01b      	beq.n	80067b6 <USB_DeactivateEndpoint+0x18a>
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	83fb      	strh	r3, [r7, #30]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	8bfb      	ldrh	r3, [r7, #30]
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	83bb      	strh	r3, [r7, #28]
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <USB_DeactivateEndpoint+0x1da>
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e4:	837b      	strh	r3, [r7, #26]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	441a      	add	r2, r3
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	833b      	strh	r3, [r7, #24]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8b3b      	ldrh	r3, [r7, #24]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	82fb      	strh	r3, [r7, #22]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	8afb      	ldrh	r3, [r7, #22]
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	82bb      	strh	r3, [r7, #20]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	441a      	add	r2, r3
 8006898:	8abb      	ldrh	r3, [r7, #20]
 800689a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	8013      	strh	r3, [r2, #0]
 80068ae:	e0a3      	b.n	80069f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <USB_DeactivateEndpoint+0x2d4>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800690e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <USB_DeactivateEndpoint+0x324>
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006984:	b29b      	uxth	r3, r3
 8006986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3734      	adds	r7, #52	; 0x34
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b0cc      	sub	sp, #304	; 0x130
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f041 817d 	bne.w	8007d2c <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d908      	bls.n	8006a60 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006a5e:	e007      	b.n	8006a70 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	7b1b      	ldrb	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d152      	bne.n	8006b26 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6959      	ldr	r1, [r3, #20]
 8006a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	88da      	ldrh	r2, [r3, #6]
 8006a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006aa2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006aa6:	6800      	ldr	r0, [r0, #0]
 8006aa8:	f001 ff1f 	bl	80088ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ab4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ada:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ade:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00da      	lsls	r2, r3, #3
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4413      	add	r3, r2
 8006b02:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	f001 b8b5 	b.w	8007c90 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	78db      	ldrb	r3, [r3, #3]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	f040 84c6 	bne.w	80074c4 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	f240 8443 	bls.w	80073dc <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6a1a      	ldr	r2, [r3, #32]
 8006bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 823e 	beq.w	8007074 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c04:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 809a 	bne.w	8006d52 <USB_EPStartXfer+0x34c>
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c2a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c50:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	440a      	add	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	00da      	lsls	r2, r3, #3
 8006c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d122      	bne.n	8006cd0 <USB_EPStartXfer+0x2ca>
 8006c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e079      	b.n	8006dc4 <USB_EPStartXfer+0x3be>
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd6:	d81b      	bhi.n	8006d10 <USB_EPStartXfer+0x30a>
 8006cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <USB_EPStartXfer+0x2f2>
 8006cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e059      	b.n	8006dc4 <USB_EPStartXfer+0x3be>
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <USB_EPStartXfer+0x32a>
 8006d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e038      	b.n	8006dc4 <USB_EPStartXfer+0x3be>
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d130      	bne.n	8006dc4 <USB_EPStartXfer+0x3be>
 8006d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d80:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	440a      	add	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	00da      	lsls	r2, r3, #3
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	895b      	ldrh	r3, [r3, #10]
 8006dd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6959      	ldr	r1, [r3, #20]
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006df2:	6800      	ldr	r0, [r0, #0]
 8006df4:	f001 fd79 	bl	80088ea <USB_WritePMA>
            ep->xfer_buff += len;
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695a      	ldr	r2, [r3, #20]
 8006e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e08:	441a      	add	r2, r3
 8006e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90f      	bls.n	8006e52 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	621a      	str	r2, [r3, #32]
 8006e50:	e00e      	b.n	8006e70 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f040 809a 	bne.w	8006fb6 <USB_EPStartXfer+0x5b0>
 8006e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e8e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006eb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eb4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	440a      	add	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	00da      	lsls	r2, r3, #3
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d122      	bne.n	8006f34 <USB_EPStartXfer+0x52e>
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	e083      	b.n	800703c <USB_EPStartXfer+0x636>
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3a:	d81b      	bhi.n	8006f74 <USB_EPStartXfer+0x56e>
 8006f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <USB_EPStartXfer+0x556>
 8006f52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f56:	3301      	adds	r3, #1
 8006f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e063      	b.n	800703c <USB_EPStartXfer+0x636>
 8006f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <USB_EPStartXfer+0x58e>
 8006f8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e042      	b.n	800703c <USB_EPStartXfer+0x636>
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d13a      	bne.n	800703c <USB_EPStartXfer+0x636>
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4619      	mov	r1, r3
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ff4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ff8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	440a      	add	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	00da      	lsls	r2, r3, #3
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4413      	add	r3, r2
 800701c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702e:	b29a      	uxth	r2, r3
 8007030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007034:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800703c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	891b      	ldrh	r3, [r3, #8]
 8007048:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6959      	ldr	r1, [r3, #20]
 8007058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705c:	b29b      	uxth	r3, r3
 800705e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007062:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007066:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	f001 fc3d 	bl	80088ea <USB_WritePMA>
 8007070:	f000 be0e 	b.w	8007c90 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d16d      	bne.n	8007160 <USB_EPStartXfer+0x75a>
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a4:	4413      	add	r3, r2
 80070a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00da      	lsls	r2, r3, #3
 80070b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b8:	4413      	add	r3, r2
 80070ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070be:	647b      	str	r3, [r7, #68]	; 0x44
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d112      	bne.n	80070ee <USB_EPStartXfer+0x6e8>
 80070c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e063      	b.n	80071b6 <USB_EPStartXfer+0x7b0>
 80070ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f2:	2b3e      	cmp	r3, #62	; 0x3e
 80070f4:	d817      	bhi.n	8007126 <USB_EPStartXfer+0x720>
 80070f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <USB_EPStartXfer+0x710>
 800710c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007110:	3301      	adds	r3, #1
 8007112:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007116:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800711a:	b29b      	uxth	r3, r3
 800711c:	029b      	lsls	r3, r3, #10
 800711e:	b29a      	uxth	r2, r3
 8007120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e047      	b.n	80071b6 <USB_EPStartXfer+0x7b0>
 8007126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <USB_EPStartXfer+0x740>
 800713c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007140:	3b01      	subs	r3, #1
 8007142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800714a:	b29b      	uxth	r3, r3
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	b29b      	uxth	r3, r3
 8007150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007158:	b29a      	uxth	r2, r3
 800715a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	e02a      	b.n	80071b6 <USB_EPStartXfer+0x7b0>
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d122      	bne.n	80071b6 <USB_EPStartXfer+0x7b0>
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	653b      	str	r3, [r7, #80]	; 0x50
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007190:	4413      	add	r3, r2
 8007192:	653b      	str	r3, [r7, #80]	; 0x50
 8007194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	00da      	lsls	r2, r3, #3
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	891b      	ldrh	r3, [r3, #8]
 80071c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6959      	ldr	r1, [r3, #20]
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071e4:	6800      	ldr	r0, [r0, #0]
 80071e6:	f001 fb80 	bl	80088ea <USB_WritePMA>
            ep->xfer_buff += len;
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695a      	ldr	r2, [r3, #20]
 80071f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fa:	441a      	add	r2, r3
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d90f      	bls.n	8007244 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	621a      	str	r2, [r3, #32]
 8007242:	e00e      	b.n	8007262 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	643b      	str	r3, [r7, #64]	; 0x40
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d16d      	bne.n	800735a <USB_EPStartXfer+0x954>
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	63bb      	str	r3, [r7, #56]	; 0x38
 800728a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	4413      	add	r3, r2
 80072a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	00da      	lsls	r2, r3, #3
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d112      	bne.n	80072e8 <USB_EPStartXfer+0x8e2>
 80072c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e05d      	b.n	80073a4 <USB_EPStartXfer+0x99e>
 80072e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ec:	2b3e      	cmp	r3, #62	; 0x3e
 80072ee:	d817      	bhi.n	8007320 <USB_EPStartXfer+0x91a>
 80072f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <USB_EPStartXfer+0x90a>
 8007306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800730a:	3301      	adds	r3, #1
 800730c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29a      	uxth	r2, r3
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e041      	b.n	80073a4 <USB_EPStartXfer+0x99e>
 8007320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800732a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <USB_EPStartXfer+0x93a>
 8007336:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800733a:	3b01      	subs	r3, #1
 800733c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007340:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007344:	b29b      	uxth	r3, r3
 8007346:	029b      	lsls	r3, r3, #10
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e024      	b.n	80073a4 <USB_EPStartXfer+0x99e>
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d11c      	bne.n	80073a4 <USB_EPStartXfer+0x99e>
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007378:	b29b      	uxth	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737e:	4413      	add	r3, r2
 8007380:	643b      	str	r3, [r7, #64]	; 0x40
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00da      	lsls	r2, r3, #3
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	4413      	add	r3, r2
 8007394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739e:	b29a      	uxth	r2, r3
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	895b      	ldrh	r3, [r3, #10]
 80073b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6959      	ldr	r1, [r3, #20]
 80073c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073d2:	6800      	ldr	r0, [r0, #0]
 80073d4:	f001 fa89 	bl	80088ea <USB_WritePMA>
 80073d8:	f000 bc5a 	b.w	8007c90 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29b      	uxth	r3, r3
 800740a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007444:	b29b      	uxth	r3, r3
 8007446:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007462:	b29b      	uxth	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007468:	4413      	add	r3, r2
 800746a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	00da      	lsls	r2, r3, #3
 800747a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747c:	4413      	add	r3, r2
 800747e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007482:	65bb      	str	r3, [r7, #88]	; 0x58
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	b29a      	uxth	r2, r3
 800748a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800748c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	891b      	ldrh	r3, [r3, #8]
 800749a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6959      	ldr	r1, [r3, #20]
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f001 fa14 	bl	80088ea <USB_WritePMA>
 80074c2:	e3e5      	b.n	8007c90 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	441a      	add	r2, r3
 8007508:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800750c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007514:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751c:	b29b      	uxth	r3, r3
 800751e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007530:	1ad2      	subs	r2, r2, r3
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 81bc 	beq.w	80078de <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d16d      	bne.n	8007660 <USB_EPStartXfer+0xc5a>
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759e:	b29b      	uxth	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a4:	4413      	add	r3, r2
 80075a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00da      	lsls	r2, r3, #3
 80075b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b8:	4413      	add	r3, r2
 80075ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075be:	677b      	str	r3, [r7, #116]	; 0x74
 80075c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d112      	bne.n	80075ee <USB_EPStartXfer+0xbe8>
 80075c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e060      	b.n	80076b0 <USB_EPStartXfer+0xcaa>
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	2b3e      	cmp	r3, #62	; 0x3e
 80075f4:	d817      	bhi.n	8007626 <USB_EPStartXfer+0xc20>
 80075f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USB_EPStartXfer+0xc10>
 800760c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007610:	3301      	adds	r3, #1
 8007612:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007616:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29a      	uxth	r2, r3
 8007620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007622:	801a      	strh	r2, [r3, #0]
 8007624:	e044      	b.n	80076b0 <USB_EPStartXfer+0xcaa>
 8007626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <USB_EPStartXfer+0xc40>
 800763c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007640:	3b01      	subs	r3, #1
 8007642:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007646:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800764a:	b29b      	uxth	r3, r3
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	b29b      	uxth	r3, r3
 8007650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007658:	b29a      	uxth	r2, r3
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e027      	b.n	80076b0 <USB_EPStartXfer+0xcaa>
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d11f      	bne.n	80076b0 <USB_EPStartXfer+0xcaa>
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767e:	b29b      	uxth	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007686:	4413      	add	r3, r2
 8007688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800768c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	00da      	lsls	r2, r3, #3
 800769a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800769e:	4413      	add	r3, r2
 80076a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	895b      	ldrh	r3, [r3, #10]
 80076bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6959      	ldr	r1, [r3, #20]
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076de:	6800      	ldr	r0, [r0, #0]
 80076e0:	f001 f903 	bl	80088ea <USB_WritePMA>
          ep->xfer_buff += len;
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695a      	ldr	r2, [r3, #20]
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	441a      	add	r2, r3
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6a1a      	ldr	r2, [r3, #32]
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	429a      	cmp	r2, r3
 800771c:	d90f      	bls.n	800773e <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	621a      	str	r2, [r3, #32]
 800773c:	e00e      	b.n	800775c <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800775c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8295 	beq.w	8007c90 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d16d      	bne.n	8007852 <USB_EPStartXfer+0xe4c>
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	66bb      	str	r3, [r7, #104]	; 0x68
 8007782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007796:	4413      	add	r3, r2
 8007798:	66bb      	str	r3, [r7, #104]	; 0x68
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	00da      	lsls	r2, r3, #3
 80077a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077aa:	4413      	add	r3, r2
 80077ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077b0:	667b      	str	r3, [r7, #100]	; 0x64
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d112      	bne.n	80077e0 <USB_EPStartXfer+0xdda>
 80077ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d8:	b29a      	uxth	r2, r3
 80077da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	e063      	b.n	80078a8 <USB_EPStartXfer+0xea2>
 80077e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e4:	2b3e      	cmp	r3, #62	; 0x3e
 80077e6:	d817      	bhi.n	8007818 <USB_EPStartXfer+0xe12>
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <USB_EPStartXfer+0xe02>
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3301      	adds	r3, #1
 8007804:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780c:	b29b      	uxth	r3, r3
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	b29a      	uxth	r2, r3
 8007812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e047      	b.n	80078a8 <USB_EPStartXfer+0xea2>
 8007818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <USB_EPStartXfer+0xe32>
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007832:	3b01      	subs	r3, #1
 8007834:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783c:	b29b      	uxth	r3, r3
 800783e:	029b      	lsls	r3, r3, #10
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e02a      	b.n	80078a8 <USB_EPStartXfer+0xea2>
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d122      	bne.n	80078a8 <USB_EPStartXfer+0xea2>
 8007862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	673b      	str	r3, [r7, #112]	; 0x70
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007882:	4413      	add	r3, r2
 8007884:	673b      	str	r3, [r7, #112]	; 0x70
 8007886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	00da      	lsls	r2, r3, #3
 8007894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007896:	4413      	add	r3, r2
 8007898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800789c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	891b      	ldrh	r3, [r3, #8]
 80078b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6959      	ldr	r1, [r3, #20]
 80078c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078ce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078d2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078d6:	6800      	ldr	r0, [r0, #0]
 80078d8:	f001 f807 	bl	80088ea <USB_WritePMA>
 80078dc:	e1d8      	b.n	8007c90 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d178      	bne.n	80079e0 <USB_EPStartXfer+0xfda>
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790a:	b29b      	uxth	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007912:	4413      	add	r3, r2
 8007914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800792a:	4413      	add	r3, r2
 800792c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d116      	bne.n	800796a <USB_EPStartXfer+0xf64>
 800793c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007948:	b29a      	uxth	r2, r3
 800794a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e06b      	b.n	8007a42 <USB_EPStartXfer+0x103c>
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	2b3e      	cmp	r3, #62	; 0x3e
 8007970:	d818      	bhi.n	80079a4 <USB_EPStartXfer+0xf9e>
 8007972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800797c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <USB_EPStartXfer+0xf8c>
 8007988:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800798c:	3301      	adds	r3, #1
 800798e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29a      	uxth	r2, r3
 800799c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e04e      	b.n	8007a42 <USB_EPStartXfer+0x103c>
 80079a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80079ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <USB_EPStartXfer+0xfbe>
 80079ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079be:	3b01      	subs	r3, #1
 80079c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80079c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e030      	b.n	8007a42 <USB_EPStartXfer+0x103c>
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d128      	bne.n	8007a42 <USB_EPStartXfer+0x103c>
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a14:	4413      	add	r3, r2
 8007a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	00da      	lsls	r2, r3, #3
 8007a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	891b      	ldrh	r3, [r3, #8]
 8007a4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6959      	ldr	r1, [r3, #20]
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	f000 ff3a 	bl	80088ea <USB_WritePMA>
          ep->xfer_buff += len;
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a86:	441a      	add	r2, r3
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6a1a      	ldr	r2, [r3, #32]
 8007aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d90f      	bls.n	8007ad0 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6a1a      	ldr	r2, [r3, #32]
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	1ad2      	subs	r2, r2, r3
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	621a      	str	r2, [r3, #32]
 8007ace:	e00e      	b.n	8007aee <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80cc 	beq.w	8007c90 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d178      	bne.n	8007c08 <USB_EPStartXfer+0x1202>
 8007b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	00da      	lsls	r2, r3, #3
 8007b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d116      	bne.n	8007b92 <USB_EPStartXfer+0x118c>
 8007b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e064      	b.n	8007c5c <USB_EPStartXfer+0x1256>
 8007b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b96:	2b3e      	cmp	r3, #62	; 0x3e
 8007b98:	d818      	bhi.n	8007bcc <USB_EPStartXfer+0x11c6>
 8007b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <USB_EPStartXfer+0x11b4>
 8007bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	e047      	b.n	8007c5c <USB_EPStartXfer+0x1256>
 8007bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <USB_EPStartXfer+0x11e6>
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be6:	3b01      	subs	r3, #1
 8007be8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	029b      	lsls	r3, r3, #10
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	e029      	b.n	8007c5c <USB_EPStartXfer+0x1256>
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d121      	bne.n	8007c5c <USB_EPStartXfer+0x1256>
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c2e:	4413      	add	r3, r2
 8007c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	00da      	lsls	r2, r3, #3
 8007c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c46:	4413      	add	r3, r2
 8007c48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	895b      	ldrh	r3, [r3, #10]
 8007c68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6959      	ldr	r1, [r3, #20]
 8007c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	f000 fe2d 	bl	80088ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cb2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbe:	8013      	strh	r3, [r2, #0]
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007cc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ccc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007cd0:	8812      	ldrh	r2, [r2, #0]
 8007cd2:	f082 0210 	eor.w	r2, r2, #16
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cdc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007ce0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ce4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007ce8:	8812      	ldrh	r2, [r2, #0]
 8007cea:	f082 0220 	eor.w	r2, r2, #32
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	441a      	add	r2, r3
 8007d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	8013      	strh	r3, [r2, #0]
 8007d28:	f000 bc9f 	b.w	800866a <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	7b1b      	ldrb	r3, [r3, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 80ae 	bne.w	8007e9a <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d917      	bls.n	8007d8a <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	619a      	str	r2, [r3, #24]
 8007d88:	e00e      	b.n	8007da8 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2200      	movs	r2, #0
 8007da6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dcc:	4413      	add	r3, r2
 8007dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	00da      	lsls	r2, r3, #3
 8007de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007de4:	4413      	add	r3, r2
 8007de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d116      	bne.n	8007e24 <USB_EPStartXfer+0x141e>
 8007df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	e3e8      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
 8007e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e28:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2a:	d818      	bhi.n	8007e5e <USB_EPStartXfer+0x1458>
 8007e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <USB_EPStartXfer+0x1446>
 8007e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e46:	3301      	adds	r3, #1
 8007e48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	e3cb      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USB_EPStartXfer+0x1478>
 8007e74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e3ad      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	78db      	ldrb	r3, [r3, #3]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	f040 8200 	bne.w	80082ac <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 8091 	bne.w	8007fe0 <USB_EPStartXfer+0x15da>
 8007ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	00da      	lsls	r2, r3, #3
 8007ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007efa:	4413      	add	r3, r2
 8007efc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d116      	bne.n	8007f42 <USB_EPStartXfer+0x153c>
 8007f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e083      	b.n	800804a <USB_EPStartXfer+0x1644>
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007f50:	d820      	bhi.n	8007f94 <USB_EPStartXfer+0x158e>
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <USB_EPStartXfer+0x157c>
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e05a      	b.n	800804a <USB_EPStartXfer+0x1644>
 8007f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <USB_EPStartXfer+0x15be>
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	029b      	lsls	r3, r3, #10
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e034      	b.n	800804a <USB_EPStartXfer+0x1644>
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d12c      	bne.n	800804a <USB_EPStartXfer+0x1644>
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008014:	4413      	add	r3, r2
 8008016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	00da      	lsls	r2, r3, #3
 8008028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800802c:	4413      	add	r3, r2
 800802e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	b29a      	uxth	r2, r3
 8008044:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 8091 	bne.w	800818c <USB_EPStartXfer+0x1786>
 800806a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008086:	b29b      	uxth	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800808e:	4413      	add	r3, r2
 8008090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	00da      	lsls	r2, r3, #3
 80080a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80080a6:	4413      	add	r3, r2
 80080a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d116      	bne.n	80080ee <USB_EPStartXfer+0x16e8>
 80080c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e07c      	b.n	80081e8 <USB_EPStartXfer+0x17e2>
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b3e      	cmp	r3, #62	; 0x3e
 80080fc:	d820      	bhi.n	8008140 <USB_EPStartXfer+0x173a>
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <USB_EPStartXfer+0x1728>
 8008124:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008128:	3301      	adds	r3, #1
 800812a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800812e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008132:	b29b      	uxth	r3, r3
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	b29a      	uxth	r2, r3
 8008138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	e053      	b.n	80081e8 <USB_EPStartXfer+0x17e2>
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <USB_EPStartXfer+0x176a>
 8008166:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800816a:	3b01      	subs	r3, #1
 800816c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008170:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008174:	b29b      	uxth	r3, r3
 8008176:	029b      	lsls	r3, r3, #10
 8008178:	b29b      	uxth	r3, r3
 800817a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008182:	b29a      	uxth	r2, r3
 8008184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008188:	801a      	strh	r2, [r3, #0]
 800818a:	e02d      	b.n	80081e8 <USB_EPStartXfer+0x17e2>
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d125      	bne.n	80081e8 <USB_EPStartXfer+0x17e2>
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081b2:	4413      	add	r3, r2
 80081b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	00da      	lsls	r2, r3, #3
 80081c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081ca:	4413      	add	r3, r2
 80081cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 81fe 	beq.w	80085f6 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800821a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <USB_EPStartXfer+0x182c>
 8008226:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008232:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 81db 	bne.w	80085f6 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008240:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 81d4 	bne.w	80085f6 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800824e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008274:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	441a      	add	r2, r3
 8008292:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
 80082aa:	e1a4      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f040 819a 	bne.w	80085f2 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d917      	bls.n	800830a <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80082ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fa:	1ad2      	subs	r2, r2, r3
 80082fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	619a      	str	r2, [r3, #24]
 8008308:	e00e      	b.n	8008328 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d178      	bne.n	800842a <USB_EPStartXfer+0x1a24>
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008354:	b29b      	uxth	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800835c:	4413      	add	r3, r2
 800835e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	00da      	lsls	r2, r3, #3
 8008370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008374:	4413      	add	r3, r2
 8008376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800837a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800837e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d116      	bne.n	80083b4 <USB_EPStartXfer+0x19ae>
 8008386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083b0:	801a      	strh	r2, [r3, #0]
 80083b2:	e06b      	b.n	800848c <USB_EPStartXfer+0x1a86>
 80083b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ba:	d818      	bhi.n	80083ee <USB_EPStartXfer+0x19e8>
 80083bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <USB_EPStartXfer+0x19d6>
 80083d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d6:	3301      	adds	r3, #1
 80083d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	e04e      	b.n	800848c <USB_EPStartXfer+0x1a86>
 80083ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <USB_EPStartXfer+0x1a08>
 8008404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008408:	3b01      	subs	r3, #1
 800840a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800840e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29b      	uxth	r3, r3
 8008418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e030      	b.n	800848c <USB_EPStartXfer+0x1a86>
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	785b      	ldrb	r3, [r3, #1]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d128      	bne.n	800848c <USB_EPStartXfer+0x1a86>
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845e:	4413      	add	r3, r2
 8008460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	00da      	lsls	r2, r3, #3
 8008472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008476:	4413      	add	r3, r2
 8008478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800847c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d178      	bne.n	800859c <USB_EPStartXfer+0x1b96>
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ce:	4413      	add	r3, r2
 80084d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	00da      	lsls	r2, r3, #3
 80084e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e6:	4413      	add	r3, r2
 80084e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d116      	bne.n	8008526 <USB_EPStartXfer+0x1b20>
 80084f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e067      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
 8008526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852a:	2b3e      	cmp	r3, #62	; 0x3e
 800852c:	d818      	bhi.n	8008560 <USB_EPStartXfer+0x1b5a>
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <USB_EPStartXfer+0x1b48>
 8008544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008548:	3301      	adds	r3, #1
 800854a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800854e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008552:	b29b      	uxth	r3, r3
 8008554:	029b      	lsls	r3, r3, #10
 8008556:	b29a      	uxth	r2, r3
 8008558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	e04a      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
 8008560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008564:	095b      	lsrs	r3, r3, #5
 8008566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800856a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <USB_EPStartXfer+0x1b7a>
 8008576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800857a:	3b01      	subs	r3, #1
 800857c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008584:	b29b      	uxth	r3, r3
 8008586:	029b      	lsls	r3, r3, #10
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e02c      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
 800859c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d124      	bne.n	80085f6 <USB_EPStartXfer+0x1bf0>
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	4413      	add	r3, r2
 80085c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	00da      	lsls	r2, r3, #3
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	4413      	add	r3, r2
 80085dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e001      	b.n	80085f6 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e03a      	b.n	800866c <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008620:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008624:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008628:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800862c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008634:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d020      	beq.n	80086ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	81bb      	strh	r3, [r7, #12]
 80086a0:	89bb      	ldrh	r3, [r7, #12]
 80086a2:	f083 0310 	eor.w	r3, r3, #16
 80086a6:	81bb      	strh	r3, [r7, #12]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	441a      	add	r2, r3
 80086b2:	89bb      	ldrh	r3, [r7, #12]
 80086b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	8013      	strh	r3, [r2, #0]
 80086c8:	e01f      	b.n	800870a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e0:	81fb      	strh	r3, [r7, #14]
 80086e2:	89fb      	ldrh	r3, [r7, #14]
 80086e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086e8:	81fb      	strh	r3, [r7, #14]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	7b1b      	ldrb	r3, [r3, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f040 809d 	bne.w	8008866 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d04c      	beq.n	80087ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	823b      	strh	r3, [r7, #16]
 8008742:	8a3b      	ldrh	r3, [r7, #16]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01b      	beq.n	8008784 <USB_EPClearStall+0x6c>
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	81fb      	strh	r3, [r7, #14]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	441a      	add	r2, r3
 800876e:	89fb      	ldrh	r3, [r7, #14]
 8008770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	78db      	ldrb	r3, [r3, #3]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d06c      	beq.n	8008866 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a2:	81bb      	strh	r3, [r7, #12]
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	f083 0320 	eor.w	r3, r3, #32
 80087aa:	81bb      	strh	r3, [r7, #12]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	441a      	add	r2, r3
 80087b6:	89bb      	ldrh	r3, [r7, #12]
 80087b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	8013      	strh	r3, [r2, #0]
 80087cc:	e04b      	b.n	8008866 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	82fb      	strh	r3, [r7, #22]
 80087dc:	8afb      	ldrh	r3, [r7, #22]
 80087de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01b      	beq.n	800881e <USB_EPClearStall+0x106>
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	82bb      	strh	r3, [r7, #20]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	441a      	add	r2, r3
 8008808:	8abb      	ldrh	r3, [r7, #20]
 800880a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	b29b      	uxth	r3, r3
 800881c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008834:	827b      	strh	r3, [r7, #18]
 8008836:	8a7b      	ldrh	r3, [r7, #18]
 8008838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800883c:	827b      	strh	r3, [r7, #18]
 800883e:	8a7b      	ldrh	r3, [r7, #18]
 8008840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008844:	827b      	strh	r3, [r7, #18]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	441a      	add	r2, r3
 8008850:	8a7b      	ldrh	r3, [r7, #18]
 8008852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800885a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800885e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008862:	b29b      	uxth	r3, r3
 8008864:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2280      	movs	r2, #128	; 0x80
 800888a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80088d8:	b29b      	uxth	r3, r3
 80088da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b08d      	sub	sp, #52	; 0x34
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	4611      	mov	r1, r2
 80088f6:	461a      	mov	r2, r3
 80088f8:	460b      	mov	r3, r1
 80088fa:	80fb      	strh	r3, [r7, #6]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008900:	88bb      	ldrh	r3, [r7, #4]
 8008902:	3301      	adds	r3, #1
 8008904:	085b      	lsrs	r3, r3, #1
 8008906:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008920:	e01b      	b.n	800895a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	3301      	adds	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	b29a      	uxth	r2, r3
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	3302      	adds	r3, #2
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	3301      	adds	r3, #1
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	3b01      	subs	r3, #1
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e0      	bne.n	8008922 <USB_WritePMA+0x38>
  }
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	3734      	adds	r7, #52	; 0x34
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800896e:	b480      	push	{r7}
 8008970:	b08b      	sub	sp, #44	; 0x2c
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	4611      	mov	r1, r2
 800897a:	461a      	mov	r2, r3
 800897c:	460b      	mov	r3, r1
 800897e:	80fb      	strh	r3, [r7, #6]
 8008980:	4613      	mov	r3, r2
 8008982:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008984:	88bb      	ldrh	r3, [r7, #4]
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800899e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
 80089a4:	e018      	b.n	80089d8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	3302      	adds	r3, #2
 80089b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3301      	adds	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	3b01      	subs	r3, #1
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e3      	bne.n	80089a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089de:	88bb      	ldrh	r3, [r7, #4]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d007      	beq.n	80089fa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	701a      	strb	r2, [r3, #0]
  }
}
 80089fa:	bf00      	nop
 80089fc:	372c      	adds	r7, #44	; 0x2c
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008a0c:	4907      	ldr	r1, [pc, #28]	; (8008a2c <MX_FATFS_Init+0x24>)
 8008a0e:	4808      	ldr	r0, [pc, #32]	; (8008a30 <MX_FATFS_Init+0x28>)
 8008a10:	f002 ff9a 	bl	800b948 <FATFS_LinkDriver>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8008a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1e:	e003      	b.n	8008a28 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8008a20:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <MX_FATFS_Init+0x2c>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8008a26:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000234 	.word	0x20000234
 8008a30:	2000000c 	.word	0x2000000c
 8008a34:	20000238 	.word	0x20000238

08008a38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <USER_initialize+0x24>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <USER_initialize+0x24>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20000009 	.word	0x20000009

08008a60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <USER_status+0x24>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008a70:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <USER_status+0x24>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000009 	.word	0x20000009

08008a88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008a98:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008ab6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	603a      	str	r2, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
    return res;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008af2:	f44f 701d 	mov.w	r0, #628	; 0x274
 8008af6:	f003 fbdb 	bl	800c2b0 <USBD_static_malloc>
 8008afa:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e034      	b.n	8008b78 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	7c1b      	ldrb	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d115      	bne.n	8008b4a <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b22:	2202      	movs	r2, #2
 8008b24:	2101      	movs	r1, #1
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 fa49 	bl	800bfbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b38:	2202      	movs	r2, #2
 8008b3a:	2181      	movs	r1, #129	; 0x81
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f003 fa3e 	bl	800bfbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	871a      	strh	r2, [r3, #56]	; 0x38
 8008b48:	e012      	b.n	8008b70 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	2101      	movs	r1, #1
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f003 fa34 	bl	800bfbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008b5e:	2340      	movs	r3, #64	; 0x40
 8008b60:	2202      	movs	r2, #2
 8008b62:	2181      	movs	r1, #129	; 0x81
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f003 fa2a 	bl	800bfbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f998 	bl	8008ea6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f003 fa3b 	bl	800c00a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8008b9c:	2181      	movs	r1, #129	; 0x81
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f003 fa33 	bl	800c00a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9d4 	bl	8008f62 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f003 fb83 	bl	800c2cc <USBD_static_free>
    pdev->pClassData = NULL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e0db      	b.n	8008db4 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d04e      	beq.n	8008ca6 <USBD_MSC_Setup+0xce>
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	f040 80cb 	bne.w	8008da4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2bfe      	cmp	r3, #254	; 0xfe
 8008c14:	d002      	beq.n	8008c1c <USBD_MSC_Setup+0x44>
 8008c16:	2bff      	cmp	r3, #255	; 0xff
 8008c18:	d025      	beq.n	8008c66 <USBD_MSC_Setup+0x8e>
 8008c1a:	e03c      	b.n	8008c96 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d119      	bne.n	8008c58 <USBD_MSC_Setup+0x80>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	88db      	ldrh	r3, [r3, #6]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d115      	bne.n	8008c58 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	da10      	bge.n	8008c58 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	4798      	blx	r3
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f002 fdcb 	bl	800b7ea <USBD_CtlSendData>
 8008c54:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c56:	e025      	b.n	8008ca4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f002 fd54 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c60:	2303      	movs	r3, #3
 8008c62:	75fb      	strb	r3, [r7, #23]
          break;
 8008c64:	e01e      	b.n	8008ca4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	885b      	ldrh	r3, [r3, #2]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10c      	bne.n	8008c88 <USBD_MSC_Setup+0xb0>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d108      	bne.n	8008c88 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	db03      	blt.n	8008c88 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f948 	bl	8008f16 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c86:	e00d      	b.n	8008ca4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f002 fd3c 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c90:	2303      	movs	r3, #3
 8008c92:	75fb      	strb	r3, [r7, #23]
          break;
 8008c94:	e006      	b.n	8008ca4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f002 fd35 	bl	800b708 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca2:	bf00      	nop
      }
      break;
 8008ca4:	e085      	b.n	8008db2 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b0b      	cmp	r3, #11
 8008cac:	d871      	bhi.n	8008d92 <USBD_MSC_Setup+0x1ba>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_MSC_Setup+0xdc>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008ce5 	.word	0x08008ce5
 8008cb8:	08008d61 	.word	0x08008d61
 8008cbc:	08008d93 	.word	0x08008d93
 8008cc0:	08008d93 	.word	0x08008d93
 8008cc4:	08008d93 	.word	0x08008d93
 8008cc8:	08008d93 	.word	0x08008d93
 8008ccc:	08008d93 	.word	0x08008d93
 8008cd0:	08008d93 	.word	0x08008d93
 8008cd4:	08008d93 	.word	0x08008d93
 8008cd8:	08008d93 	.word	0x08008d93
 8008cdc:	08008d0f 	.word	0x08008d0f
 8008ce0:	08008d39 	.word	0x08008d39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d107      	bne.n	8008d00 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cf0:	f107 030e 	add.w	r3, r7, #14
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f002 fd76 	bl	800b7ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cfe:	e050      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f002 fd00 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d0c:	e049      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d107      	bne.n	8008d2a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f002 fd61 	bl	800b7ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d28:	e03b      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f002 fceb 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	75fb      	strb	r3, [r7, #23]
          break;
 8008d36:	e034      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d106      	bne.n	8008d52 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	885b      	ldrh	r3, [r3, #2]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d50:	e027      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f002 fcd7 	bl	800b708 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d5e:	e020      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d119      	bne.n	8008da0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d115      	bne.n	8008da0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	889b      	ldrh	r3, [r3, #4]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f003 f963 	bl	800c048 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa82 	bl	8009294 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008d90:	e006      	b.n	8008da0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f002 fcb7 	bl	800b708 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d9e:	e000      	b.n	8008da2 <USBD_MSC_Setup+0x1ca>
          break;
 8008da0:	bf00      	nop
      }
      break;
 8008da2:	e006      	b.n	8008db2 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f002 fcae 	bl	800b708 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dac:	2303      	movs	r3, #3
 8008dae:	75fb      	strb	r3, [r7, #23]
      break;
 8008db0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8dc 	bl	8008f8a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f902 	bl	8008ff6 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8008e0a:	4b03      	ldr	r3, [pc, #12]	; (8008e18 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	20000058 	.word	0x20000058

08008e1c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8008e2a:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	20000078 	.word	0x20000078

08008e3c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8008e4a:	4b03      	ldr	r3, [pc, #12]	; (8008e58 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20000098 	.word	0x20000098

08008e5c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	220a      	movs	r2, #10
 8008e68:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	200000b8 	.word	0x200000b8

08008e7c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e004      	b.n	8008e9a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eb4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d028      	beq.n	8008f0e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2000      	movs	r0, #0
 8008eea:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008eec:	2101      	movs	r1, #1
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f003 f8aa 	bl	800c048 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008ef4:	2181      	movs	r1, #129	; 0x81
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f003 f8a6 	bl	800c048 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008f02:	231f      	movs	r3, #31
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f003 f968 	bl	800c1dc <USBD_LL_PrepareReceive>
 8008f0c:	e000      	b.n	8008f10 <MSC_BOT_Init+0x6a>
    return;
 8008f0e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f24:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d016      	beq.n	8008f5a <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8008f38:	2181      	movs	r1, #129	; 0x81
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f003 f8c2 	bl	800c0c4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8008f40:	2101      	movs	r1, #1
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f003 f8be 	bl	800c0c4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008f4e:	231f      	movs	r3, #31
 8008f50:	2101      	movs	r1, #1
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f003 f942 	bl	800c1dc <USBD_LL_PrepareReceive>
 8008f58:	e000      	b.n	8008f5c <MSC_BOT_Reset+0x46>
    return;
 8008f5a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f70:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	721a      	strb	r2, [r3, #8]
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f9c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d020      	beq.n	8008fe6 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	7a1b      	ldrb	r3, [r3, #8]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d005      	beq.n	8008fb8 <MSC_BOT_DataIn+0x2e>
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	db1c      	blt.n	8008fea <MSC_BOT_DataIn+0x60>
 8008fb0:	3b03      	subs	r3, #3
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d819      	bhi.n	8008fea <MSC_BOT_DataIn+0x60>
 8008fb6:	e011      	b.n	8008fdc <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f992 	bl	80092f0 <SCSI_ProcessCmd>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da0d      	bge.n	8008fee <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8fb 	bl	80091d0 <MSC_BOT_SendCSW>
      }
      break;
 8008fda:	e008      	b.n	8008fee <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8f6 	bl	80091d0 <MSC_BOT_SendCSW>
      break;
 8008fe4:	e004      	b.n	8008ff0 <MSC_BOT_DataIn+0x66>
    return;
 8008fe6:	bf00      	nop
 8008fe8:	e002      	b.n	8008ff0 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8008fea:	bf00      	nop
 8008fec:	e000      	b.n	8008ff0 <MSC_BOT_DataIn+0x66>
      break;
 8008fee:	bf00      	nop
  }
}
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009008:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01c      	beq.n	800904a <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	7a1b      	ldrb	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <MSC_BOT_DataOut+0x28>
 8009018:	2b01      	cmp	r3, #1
 800901a:	d004      	beq.n	8009026 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800901c:	e018      	b.n	8009050 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f81a 	bl	8009058 <MSC_BOT_CBW_Decode>
      break;
 8009024:	e014      	b.n	8009050 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009032:	461a      	mov	r2, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f95b 	bl	80092f0 <SCSI_ProcessCmd>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	da06      	bge.n	800904e <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009040:	2101      	movs	r1, #1
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f8c4 	bl	80091d0 <MSC_BOT_SendCSW>
      break;
 8009048:	e001      	b.n	800904e <MSC_BOT_DataOut+0x58>
    return;
 800904a:	bf00      	nop
 800904c:	e000      	b.n	8009050 <MSC_BOT_DataOut+0x5a>
      break;
 800904e:	bf00      	nop
  }
}
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009066:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d077      	beq.n	800915e <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009086:	2101      	movs	r1, #1
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f003 f8c8 	bl	800c21e <USBD_LL_GetRxDataSize>
 800908e:	4603      	mov	r3, r0
 8009090:	2b1f      	cmp	r3, #31
 8009092:	d114      	bne.n	80090be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800909a:	4a34      	ldr	r2, [pc, #208]	; (800916c <MSC_BOT_CBW_Decode+0x114>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10e      	bne.n	80090be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d809      	bhi.n	80090be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d90e      	bls.n	80090dc <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80090c4:	2320      	movs	r3, #32
 80090c6:	2205      	movs	r2, #5
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fdbc 	bl	8009c46 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2202      	movs	r2, #2
 80090d2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f8ab 	bl	8009230 <MSC_BOT_Abort>
 80090da:	e043      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80090e8:	461a      	mov	r2, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f900 	bl	80092f0 <SCSI_ProcessCmd>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da0c      	bge.n	8009110 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	7a1b      	ldrb	r3, [r3, #8]
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	d104      	bne.n	8009108 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80090fe:	2101      	movs	r1, #1
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f865 	bl	80091d0 <MSC_BOT_SendCSW>
 8009106:	e02d      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f891 	bl	8009230 <MSC_BOT_Abort>
 800910e:	e029      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	7a1b      	ldrb	r3, [r3, #8]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d024      	beq.n	8009162 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800911c:	2b01      	cmp	r3, #1
 800911e:	d020      	beq.n	8009162 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009124:	2b03      	cmp	r3, #3
 8009126:	d01c      	beq.n	8009162 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f103 0110 	add.w	r1, r3, #16
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	461a      	mov	r2, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f817 	bl	8009170 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009142:	e00f      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f83e 	bl	80091d0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009154:	e006      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f86a 	bl	8009230 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800915c:	e002      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
    return;
 800915e:	bf00      	nop
 8009160:	e000      	b.n	8009164 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8009162:	bf00      	nop
    }
  }
}
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	43425355 	.word	0x43425355

08009170 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009182:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	4293      	cmp	r3, r2
 800918e:	bf28      	it	cs
 8009190:	4613      	movcs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d015      	beq.n	80091c6 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2204      	movs	r2, #4
 80091b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	2181      	movs	r1, #129	; 0x81
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f002 ffeb 	bl	800c19a <USBD_LL_Transmit>
 80091c4:	e000      	b.n	80091c8 <MSC_BOT_SendData+0x58>
    return;
 80091c6:	bf00      	nop
}
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01b      	beq.n	8009222 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4a0f      	ldr	r2, [pc, #60]	; (800922c <MSC_BOT_SendCSW+0x5c>)
 80091ee:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8009206:	230d      	movs	r3, #13
 8009208:	2181      	movs	r1, #129	; 0x81
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 ffc5 	bl	800c19a <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8009216:	231f      	movs	r3, #31
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f002 ffde 	bl	800c1dc <USBD_LL_PrepareReceive>
 8009220:	e000      	b.n	8009224 <MSC_BOT_SendCSW+0x54>
    return;
 8009222:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	53425355 	.word	0x53425355

08009230 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800923e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d022      	beq.n	800928c <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10c      	bne.n	800926a <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009262:	2101      	movs	r1, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 ff0e 	bl	800c086 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800926a:	2181      	movs	r1, #129	; 0x81
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f002 ff0a 	bl	800c086 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	7a5b      	ldrb	r3, [r3, #9]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d109      	bne.n	800928e <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800927a:	2181      	movs	r1, #129	; 0x81
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f002 ff02 	bl	800c086 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009282:	2101      	movs	r1, #1
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f002 fefe 	bl	800c086 <USBD_LL_StallEP>
 800928a:	e000      	b.n	800928e <MSC_BOT_Abort+0x5e>
    return;
 800928c:	bf00      	nop
  }
}
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d019      	beq.n	80092e2 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	7a5b      	ldrb	r3, [r3, #9]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d108      	bne.n	80092c8 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80092b6:	2181      	movs	r1, #129	; 0x81
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f002 fee4 	bl	800c086 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80092be:	2101      	movs	r1, #1
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f002 fee0 	bl	800c086 <USBD_LL_StallEP>
 80092c6:	e00f      	b.n	80092e8 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80092c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	da0a      	bge.n	80092e6 <MSC_BOT_CplClrFeature+0x52>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	7a5b      	ldrb	r3, [r3, #9]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d006      	beq.n	80092e6 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80092d8:	2101      	movs	r1, #1
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff ff78 	bl	80091d0 <MSC_BOT_SendCSW>
 80092e0:	e002      	b.n	80092e8 <MSC_BOT_CplClrFeature+0x54>
    return;
 80092e2:	bf00      	nop
 80092e4:	e000      	b.n	80092e8 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 80092e6:	bf00      	nop
  }
}
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	460b      	mov	r3, r1
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009304:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	e168      	b.n	80095e4 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2baa      	cmp	r3, #170	; 0xaa
 8009318:	f000 8144 	beq.w	80095a4 <SCSI_ProcessCmd+0x2b4>
 800931c:	2baa      	cmp	r3, #170	; 0xaa
 800931e:	f300 8153 	bgt.w	80095c8 <SCSI_ProcessCmd+0x2d8>
 8009322:	2ba8      	cmp	r3, #168	; 0xa8
 8009324:	f000 812c 	beq.w	8009580 <SCSI_ProcessCmd+0x290>
 8009328:	2ba8      	cmp	r3, #168	; 0xa8
 800932a:	f300 814d 	bgt.w	80095c8 <SCSI_ProcessCmd+0x2d8>
 800932e:	2b5a      	cmp	r3, #90	; 0x5a
 8009330:	f300 80c0 	bgt.w	80094b4 <SCSI_ProcessCmd+0x1c4>
 8009334:	2b00      	cmp	r3, #0
 8009336:	f2c0 8147 	blt.w	80095c8 <SCSI_ProcessCmd+0x2d8>
 800933a:	2b5a      	cmp	r3, #90	; 0x5a
 800933c:	f200 8144 	bhi.w	80095c8 <SCSI_ProcessCmd+0x2d8>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <SCSI_ProcessCmd+0x58>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	080094bb 	.word	0x080094bb
 800934c:	080095c9 	.word	0x080095c9
 8009350:	080095c9 	.word	0x080095c9
 8009354:	080094cd 	.word	0x080094cd
 8009358:	080095c9 	.word	0x080095c9
 800935c:	080095c9 	.word	0x080095c9
 8009360:	080095c9 	.word	0x080095c9
 8009364:	080095c9 	.word	0x080095c9
 8009368:	080095c9 	.word	0x080095c9
 800936c:	080095c9 	.word	0x080095c9
 8009370:	080095c9 	.word	0x080095c9
 8009374:	080095c9 	.word	0x080095c9
 8009378:	080095c9 	.word	0x080095c9
 800937c:	080095c9 	.word	0x080095c9
 8009380:	080095c9 	.word	0x080095c9
 8009384:	080095c9 	.word	0x080095c9
 8009388:	080095c9 	.word	0x080095c9
 800938c:	080095c9 	.word	0x080095c9
 8009390:	080094df 	.word	0x080094df
 8009394:	080095c9 	.word	0x080095c9
 8009398:	080095c9 	.word	0x080095c9
 800939c:	080095c9 	.word	0x080095c9
 80093a0:	080095c9 	.word	0x080095c9
 80093a4:	080095c9 	.word	0x080095c9
 80093a8:	080095c9 	.word	0x080095c9
 80093ac:	080095c9 	.word	0x080095c9
 80093b0:	08009515 	.word	0x08009515
 80093b4:	080094f1 	.word	0x080094f1
 80093b8:	080095c9 	.word	0x080095c9
 80093bc:	080095c9 	.word	0x080095c9
 80093c0:	08009503 	.word	0x08009503
 80093c4:	080095c9 	.word	0x080095c9
 80093c8:	080095c9 	.word	0x080095c9
 80093cc:	080095c9 	.word	0x080095c9
 80093d0:	080095c9 	.word	0x080095c9
 80093d4:	08009539 	.word	0x08009539
 80093d8:	080095c9 	.word	0x080095c9
 80093dc:	0800954b 	.word	0x0800954b
 80093e0:	080095c9 	.word	0x080095c9
 80093e4:	080095c9 	.word	0x080095c9
 80093e8:	0800956f 	.word	0x0800956f
 80093ec:	080095c9 	.word	0x080095c9
 80093f0:	08009593 	.word	0x08009593
 80093f4:	080095c9 	.word	0x080095c9
 80093f8:	080095c9 	.word	0x080095c9
 80093fc:	080095c9 	.word	0x080095c9
 8009400:	080095c9 	.word	0x080095c9
 8009404:	080095b7 	.word	0x080095b7
 8009408:	080095c9 	.word	0x080095c9
 800940c:	080095c9 	.word	0x080095c9
 8009410:	080095c9 	.word	0x080095c9
 8009414:	080095c9 	.word	0x080095c9
 8009418:	080095c9 	.word	0x080095c9
 800941c:	080095c9 	.word	0x080095c9
 8009420:	080095c9 	.word	0x080095c9
 8009424:	080095c9 	.word	0x080095c9
 8009428:	080095c9 	.word	0x080095c9
 800942c:	080095c9 	.word	0x080095c9
 8009430:	080095c9 	.word	0x080095c9
 8009434:	080095c9 	.word	0x080095c9
 8009438:	080095c9 	.word	0x080095c9
 800943c:	080095c9 	.word	0x080095c9
 8009440:	080095c9 	.word	0x080095c9
 8009444:	080095c9 	.word	0x080095c9
 8009448:	080095c9 	.word	0x080095c9
 800944c:	080095c9 	.word	0x080095c9
 8009450:	080095c9 	.word	0x080095c9
 8009454:	080095c9 	.word	0x080095c9
 8009458:	080095c9 	.word	0x080095c9
 800945c:	080095c9 	.word	0x080095c9
 8009460:	080095c9 	.word	0x080095c9
 8009464:	080095c9 	.word	0x080095c9
 8009468:	080095c9 	.word	0x080095c9
 800946c:	080095c9 	.word	0x080095c9
 8009470:	080095c9 	.word	0x080095c9
 8009474:	080095c9 	.word	0x080095c9
 8009478:	080095c9 	.word	0x080095c9
 800947c:	080095c9 	.word	0x080095c9
 8009480:	080095c9 	.word	0x080095c9
 8009484:	080095c9 	.word	0x080095c9
 8009488:	080095c9 	.word	0x080095c9
 800948c:	080095c9 	.word	0x080095c9
 8009490:	080095c9 	.word	0x080095c9
 8009494:	080095c9 	.word	0x080095c9
 8009498:	080095c9 	.word	0x080095c9
 800949c:	080095c9 	.word	0x080095c9
 80094a0:	080095c9 	.word	0x080095c9
 80094a4:	080095c9 	.word	0x080095c9
 80094a8:	080095c9 	.word	0x080095c9
 80094ac:	080095c9 	.word	0x080095c9
 80094b0:	08009527 	.word	0x08009527
 80094b4:	2b9e      	cmp	r3, #158	; 0x9e
 80094b6:	d051      	beq.n	800955c <SCSI_ProcessCmd+0x26c>
 80094b8:	e086      	b.n	80095c8 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4619      	mov	r1, r3
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f893 	bl	80095ec <SCSI_TestUnitReady>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ca:	e089      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4619      	mov	r1, r3
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fb38 	bl	8009b48 <SCSI_RequestSense>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]
      break;
 80094dc:	e080      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4619      	mov	r1, r3
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f8d1 	bl	800968c <SCSI_Inquiry>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
      break;
 80094ee:	e077      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	4619      	mov	r1, r3
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fbec 	bl	8009cd4 <SCSI_StartStopUnit>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009500:	e06e      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 fc34 	bl	8009d76 <SCSI_AllowPreventRemovable>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
      break;
 8009512:	e065      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009514:	7afb      	ldrb	r3, [r7, #11]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	4619      	mov	r1, r3
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fabc 	bl	8009a98 <SCSI_ModeSense6>
 8009520:	4603      	mov	r3, r0
 8009522:	75fb      	strb	r3, [r7, #23]
      break;
 8009524:	e05c      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4619      	mov	r1, r3
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fadf 	bl	8009af0 <SCSI_ModeSense10>
 8009532:	4603      	mov	r3, r0
 8009534:	75fb      	strb	r3, [r7, #23]
      break;
 8009536:	e053      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4619      	mov	r1, r3
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fa37 	bl	80099b2 <SCSI_ReadFormatCapacity>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]
      break;
 8009548:	e04a      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800954a:	7afb      	ldrb	r3, [r7, #11]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4619      	mov	r1, r3
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f90f 	bl	8009774 <SCSI_ReadCapacity10>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]
      break;
 800955a:	e041      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4619      	mov	r1, r3
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f97b 	bl	800985e <SCSI_ReadCapacity16>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
      break;
 800956c:	e038      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fc27 	bl	8009dc8 <SCSI_Read10>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]
      break;
 800957e:	e02f      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	4619      	mov	r1, r3
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fcbe 	bl	8009f08 <SCSI_Read12>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
      break;
 8009590:	e026      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	4619      	mov	r1, r3
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fd60 	bl	800a05e <SCSI_Write10>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
      break;
 80095a2:	e01d      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	4619      	mov	r1, r3
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fe1c 	bl	800a1e8 <SCSI_Write12>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]
      break;
 80095b4:	e014      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4619      	mov	r1, r3
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fee8 	bl	800a392 <SCSI_Verify10>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75fb      	strb	r3, [r7, #23]
      break;
 80095c6:	e00b      	b.n	80095e0 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80095c8:	7af9      	ldrb	r1, [r7, #11]
 80095ca:	2320      	movs	r3, #32
 80095cc:	2205      	movs	r2, #5
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 fb39 	bl	8009c46 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2202      	movs	r2, #2
 80095d8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80095da:	23ff      	movs	r3, #255	; 0xff
 80095dc:	75fb      	strb	r3, [r7, #23]
      break;
 80095de:	bf00      	nop
  }

  return ret;
 80095e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	460b      	mov	r3, r1
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009600:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295
 800960c:	e03a      	b.n	8009684 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800961e:	2320      	movs	r3, #32
 8009620:	2205      	movs	r2, #5
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 fb0f 	bl	8009c46 <SCSI_SenseCode>

    return -1;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	e02a      	b.n	8009684 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009634:	2b02      	cmp	r3, #2
 8009636:	d10b      	bne.n	8009650 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009638:	7af9      	ldrb	r1, [r7, #11]
 800963a:	233a      	movs	r3, #58	; 0x3a
 800963c:	2202      	movs	r2, #2
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fb01 	bl	8009c46 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2205      	movs	r2, #5
 8009648:	721a      	strb	r2, [r3, #8]
    return -1;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	e019      	b.n	8009684 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	7afa      	ldrb	r2, [r7, #11]
 800965a:	4610      	mov	r0, r2
 800965c:	4798      	blx	r3
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009664:	7af9      	ldrb	r1, [r7, #11]
 8009666:	233a      	movs	r3, #58	; 0x3a
 8009668:	2202      	movs	r2, #2
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 faeb 	bl	8009c46 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2205      	movs	r2, #5
 8009674:	721a      	strb	r2, [r3, #8]

    return -1;
 8009676:	f04f 33ff 	mov.w	r3, #4294967295
 800967a:	e003      	b.n	8009684 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	60da      	str	r2, [r3, #12]

  return 0;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	460b      	mov	r3, r1
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <SCSI_Inquiry+0x22>
  {
    return -1;
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ac:	e05a      	b.n	8009764 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80096be:	2320      	movs	r3, #32
 80096c0:	2205      	movs	r2, #5
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fabf 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 80096c8:	f04f 33ff 	mov.w	r3, #4294967295
 80096cc:	e04a      	b.n	8009764 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3301      	adds	r3, #1
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d020      	beq.n	800971e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3302      	adds	r3, #2
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d105      	bne.n	80096f2 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80096e6:	2206      	movs	r2, #6
 80096e8:	4920      	ldr	r1, [pc, #128]	; (800976c <SCSI_Inquiry+0xe0>)
 80096ea:	69b8      	ldr	r0, [r7, #24]
 80096ec:	f000 ffb4 	bl	800a658 <SCSI_UpdateBotData>
 80096f0:	e037      	b.n	8009762 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3302      	adds	r3, #2
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b80      	cmp	r3, #128	; 0x80
 80096fa:	d105      	bne.n	8009708 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80096fc:	2208      	movs	r2, #8
 80096fe:	491c      	ldr	r1, [pc, #112]	; (8009770 <SCSI_Inquiry+0xe4>)
 8009700:	69b8      	ldr	r0, [r7, #24]
 8009702:	f000 ffa9 	bl	800a658 <SCSI_UpdateBotData>
 8009706:	e02c      	b.n	8009762 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800970e:	2324      	movs	r3, #36	; 0x24
 8009710:	2205      	movs	r2, #5
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fa97 	bl	8009c46 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	e022      	b.n	8009764 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009724:	69d9      	ldr	r1, [r3, #28]
 8009726:	7afa      	ldrb	r2, [r7, #11]
 8009728:	4613      	mov	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	3304      	adds	r3, #4
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	3305      	adds	r3, #5
 800973e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	8bfa      	ldrh	r2, [r7, #30]
 800974a:	429a      	cmp	r2, r3
 800974c:	d303      	bcc.n	8009756 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3304      	adds	r3, #4
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009756:	8bfb      	ldrh	r3, [r7, #30]
 8009758:	461a      	mov	r2, r3
 800975a:	6979      	ldr	r1, [r7, #20]
 800975c:	69b8      	ldr	r0, [r7, #24]
 800975e:	f000 ff7b 	bl	800a658 <SCSI_UpdateBotData>
  }

  return 0;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200000c4 	.word	0x200000c4
 8009770:	200000cc 	.word	0x200000cc

08009774 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	460b      	mov	r3, r1
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009788:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	e05f      	b.n	8009856 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80097aa:	7af8      	ldrb	r0, [r7, #11]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80097b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <SCSI_ReadCapacity10+0x50>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d108      	bne.n	80097d6 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80097c4:	7af9      	ldrb	r1, [r7, #11]
 80097c6:	233a      	movs	r3, #58	; 0x3a
 80097c8:	2202      	movs	r2, #2
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 fa3b 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	e03f      	b.n	8009856 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80097dc:	3b01      	subs	r3, #1
 80097de:	0e1b      	lsrs	r3, r3, #24
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80097ec:	3b01      	subs	r3, #1
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80097fc:	3b01      	subs	r3, #1
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	b2da      	uxtb	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800980c:	b2db      	uxtb	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b2da      	uxtb	r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800981c:	161b      	asrs	r3, r3, #24
 800981e:	b2da      	uxtb	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800982a:	141b      	asrs	r3, r3, #16
 800982c:	b2da      	uxtb	r2, r3
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	b29b      	uxth	r3, r3
 800983c:	b2da      	uxtb	r2, r3
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009848:	b2da      	uxtb	r2, r3
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2208      	movs	r2, #8
 8009852:	60da      	str	r2, [r3, #12]

  return 0;
 8009854:	2300      	movs	r3, #0

}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b088      	sub	sp, #32
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	460b      	mov	r3, r1
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009872:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800987a:	f04f 33ff 	mov.w	r3, #4294967295
 800987e:	e094      	b.n	80099aa <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8009894:	7af8      	ldrb	r0, [r7, #11]
 8009896:	4798      	blx	r3
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800989c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <SCSI_ReadCapacity16+0x50>
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d108      	bne.n	80098c0 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80098ae:	7af9      	ldrb	r1, [r7, #11]
 80098b0:	233a      	movs	r3, #58	; 0x3a
 80098b2:	2202      	movs	r2, #2
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 f9c6 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e074      	b.n	80099aa <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	330a      	adds	r3, #10
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	330b      	adds	r3, #11
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	330c      	adds	r3, #12
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80098da:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	320d      	adds	r2, #13
 80098e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80098e2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e007      	b.n	80098fe <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80098ee:	7ffb      	ldrb	r3, [r7, #31]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	4413      	add	r3, r2
 80098f4:	2200      	movs	r2, #0
 80098f6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80098f8:	7ffb      	ldrb	r3, [r7, #31]
 80098fa:	3301      	adds	r3, #1
 80098fc:	77fb      	strb	r3, [r7, #31]
 80098fe:	7ffa      	ldrb	r2, [r7, #31]
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	429a      	cmp	r2, r3
 8009906:	d3f2      	bcc.n	80098ee <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800990e:	3b01      	subs	r3, #1
 8009910:	0e1b      	lsrs	r3, r3, #24
 8009912:	b2da      	uxtb	r2, r3
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800991e:	3b01      	subs	r3, #1
 8009920:	0c1b      	lsrs	r3, r3, #16
 8009922:	b2da      	uxtb	r2, r3
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800992e:	3b01      	subs	r3, #1
 8009930:	0a1b      	lsrs	r3, r3, #8
 8009932:	b2da      	uxtb	r2, r3
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800993e:	b2db      	uxtb	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800994e:	161b      	asrs	r3, r3, #24
 8009950:	b2da      	uxtb	r2, r3
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800995c:	141b      	asrs	r3, r3, #16
 800995e:	b2da      	uxtb	r2, r3
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800996a:	0a1b      	lsrs	r3, r3, #8
 800996c:	b29b      	uxth	r3, r3
 800996e:	b2da      	uxtb	r2, r3
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800997a:	b2da      	uxtb	r2, r3
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	330a      	adds	r3, #10
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	330b      	adds	r3, #11
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009990:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	330c      	adds	r3, #12
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800999a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	320d      	adds	r2, #13
 80099a0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80099a2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	60da      	str	r2, [r3, #12]

  return 0;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	460b      	mov	r3, r1
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099c6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295
 80099d2:	e05c      	b.n	8009a8e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f107 0214 	add.w	r2, r7, #20
 80099e0:	f107 0110 	add.w	r1, r7, #16
 80099e4:	7af8      	ldrb	r0, [r7, #11]
 80099e6:	4798      	blx	r3
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80099ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <SCSI_ReadFormatCapacity+0x4c>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d108      	bne.n	8009a10 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80099fe:	7af9      	ldrb	r1, [r7, #11]
 8009a00:	233a      	movs	r3, #58	; 0x3a
 8009a02:	2202      	movs	r2, #2
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f91e 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	e03e      	b.n	8009a8e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	83fb      	strh	r3, [r7, #30]
 8009a14:	e007      	b.n	8009a26 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8009a16:	8bfb      	ldrh	r3, [r7, #30]
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009a20:	8bfb      	ldrh	r3, [r7, #30]
 8009a22:	3301      	adds	r3, #1
 8009a24:	83fb      	strh	r3, [r7, #30]
 8009a26:	8bfb      	ldrh	r3, [r7, #30]
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d9f4      	bls.n	8009a16 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	2208      	movs	r2, #8
 8009a30:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	0e1b      	lsrs	r3, r3, #24
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	0a1b      	lsrs	r3, r3, #8
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2202      	movs	r2, #2
 8009a66:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009a68:	8abb      	ldrh	r3, [r7, #20]
 8009a6a:	141b      	asrs	r3, r3, #16
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009a72:	8abb      	ldrh	r3, [r7, #20]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009a7e:	8abb      	ldrh	r3, [r7, #20]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	220c      	movs	r2, #12
 8009a8a:	60da      	str	r2, [r3, #12]

  return 0;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009aae:	2317      	movs	r3, #23
 8009ab0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <SCSI_ModeSense6+0x26>
  {
    return -1;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	e011      	b.n	8009ae2 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	8afa      	ldrh	r2, [r7, #22]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d303      	bcc.n	8009ad4 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009ad4:	8afb      	ldrh	r3, [r7, #22]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	4904      	ldr	r1, [pc, #16]	; (8009aec <SCSI_ModeSense6+0x54>)
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f000 fdbc 	bl	800a658 <SCSI_UpdateBotData>

  return 0;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	200000d4 	.word	0x200000d4

08009af0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	460b      	mov	r3, r1
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b04:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009b06:	231b      	movs	r3, #27
 8009b08:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295
 8009b14:	e011      	b.n	8009b3a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8afa      	ldrh	r2, [r7, #22]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d303      	bcc.n	8009b2c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3308      	adds	r3, #8
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009b2c:	8afb      	ldrh	r3, [r7, #22]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4904      	ldr	r1, [pc, #16]	; (8009b44 <SCSI_ModeSense10+0x54>)
 8009b32:	6938      	ldr	r0, [r7, #16]
 8009b34:	f000 fd90 	bl	800a658 <SCSI_UpdateBotData>

  return 0;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200000ec 	.word	0x200000ec

08009b48 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	460b      	mov	r3, r1
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <SCSI_RequestSense+0x22>
  {
    return -1;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	e069      	b.n	8009c3e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b7a:	2320      	movs	r3, #32
 8009b7c:	2205      	movs	r2, #5
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f861 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	e059      	b.n	8009c3e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	75fb      	strb	r3, [r7, #23]
 8009b8e:	e007      	b.n	8009ba0 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4413      	add	r3, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b11      	cmp	r3, #17
 8009ba4:	d9f4      	bls.n	8009b90 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2270      	movs	r2, #112	; 0x70
 8009baa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	220c      	movs	r2, #12
 8009bb0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d02e      	beq.n	8009c20 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009bc8:	461a      	mov	r2, r3
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3248      	adds	r2, #72	; 0x48
 8009bce:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	3348      	adds	r3, #72	; 0x48
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	791a      	ldrb	r2, [r3, #4]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	3348      	adds	r3, #72	; 0x48
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	795a      	ldrb	r2, [r3, #5]
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009c04:	3301      	adds	r3, #1
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d103      	bne.n	8009c20 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	2212      	movs	r2, #18
 8009c24:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b12      	cmp	r3, #18
 8009c2e:	d805      	bhi.n	8009c3c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	461a      	mov	r2, r3
 8009c54:	4603      	mov	r3, r0
 8009c56:	70fb      	strb	r3, [r7, #3]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70bb      	strb	r3, [r7, #2]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c66:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d02c      	beq.n	8009cc8 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009c74:	461a      	mov	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3248      	adds	r2, #72	; 0x48
 8009c7a:	78b9      	ldrb	r1, [r7, #2]
 8009c7c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	3348      	adds	r3, #72	; 0x48
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	4413      	add	r3, r2
 8009c8e:	787a      	ldrb	r2, [r7, #1]
 8009c90:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	3348      	adds	r3, #72	; 0x48
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	4413      	add	r3, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009caa:	3301      	adds	r3, #1
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d105      	bne.n	8009cca <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8009cc6:	e000      	b.n	8009cca <SCSI_SenseCode+0x84>
    return;
 8009cc8:	bf00      	nop
  }
}
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	e03b      	b.n	8009d6e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10f      	bne.n	8009d20 <SCSI_StartStopUnit+0x4c>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0303 	and.w	r3, r3, #3
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d108      	bne.n	8009d20 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009d0e:	7af9      	ldrb	r1, [r7, #11]
 8009d10:	2324      	movs	r3, #36	; 0x24
 8009d12:	2205      	movs	r2, #5
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7ff ff96 	bl	8009c46 <SCSI_SenseCode>

    return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	e026      	b.n	8009d6e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d104      	bne.n	8009d38 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009d36:	e016      	b.n	8009d66 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d104      	bne.n	8009d50 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2202      	movs	r2, #2
 8009d4a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009d4e:	e00a      	b.n	8009d66 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3304      	adds	r3, #4
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d103      	bne.n	8009d66 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	60da      	str	r2, [r3, #12]

  return 0;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b087      	sub	sp, #28
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d8a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8009d92:	f04f 33ff 	mov.w	r3, #4294967295
 8009d96:	e011      	b.n	8009dbc <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d104      	bne.n	8009dac <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009daa:	e003      	b.n	8009db4 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2200      	movs	r2, #0
 8009db8:	60da      	str	r2, [r3, #12]

  return 0;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ddc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <SCSI_Read10+0x22>
  {
    return -1;
 8009de4:	f04f 33ff 	mov.w	r3, #4294967295
 8009de8:	e08a      	b.n	8009f00 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	7a1b      	ldrb	r3, [r3, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d17c      	bne.n	8009eec <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	db0a      	blt.n	8009e14 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009e04:	2320      	movs	r3, #32
 8009e06:	2205      	movs	r2, #5
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff ff1c 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e12:	e075      	b.n	8009f00 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d108      	bne.n	8009e30 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e1e:	7af9      	ldrb	r1, [r7, #11]
 8009e20:	233a      	movs	r3, #58	; 0x3a
 8009e22:	2202      	movs	r2, #2
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff ff0e 	bl	8009c46 <SCSI_SenseCode>

      return -1;
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2e:	e067      	b.n	8009f00 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	7afa      	ldrb	r2, [r7, #11]
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4798      	blx	r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e44:	7af9      	ldrb	r1, [r7, #11]
 8009e46:	233a      	movs	r3, #58	; 0x3a
 8009e48:	2202      	movs	r2, #2
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fefb 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009e50:	f04f 33ff 	mov.w	r3, #4294967295
 8009e54:	e054      	b.n	8009f00 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3302      	adds	r3, #2
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3303      	adds	r3, #3
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009e70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	3205      	adds	r2, #5
 8009e76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009e78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3307      	adds	r3, #7
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	3208      	adds	r2, #8
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ea2:	7af9      	ldrb	r1, [r7, #11]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 faad 	bl	800a404 <SCSI_CheckAddressRange>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da02      	bge.n	8009eb6 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb4:	e024      	b.n	8009f00 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ec2:	6979      	ldr	r1, [r7, #20]
 8009ec4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8009ec8:	fb01 f303 	mul.w	r3, r1, r3
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d00a      	beq.n	8009ee6 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	2205      	movs	r2, #5
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff feb3 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee4:	e00c      	b.n	8009f00 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ef2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 faab 	bl	800a454 <SCSI_ProcessRead>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	460b      	mov	r3, r1
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f1c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <SCSI_Read12+0x22>
  {
    return -1;
 8009f24:	f04f 33ff 	mov.w	r3, #4294967295
 8009f28:	e095      	b.n	800a056 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	7a1b      	ldrb	r3, [r3, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 8087 	bne.w	800a042 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009f3a:	b25b      	sxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	db0a      	blt.n	8009f56 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009f46:	2320      	movs	r3, #32
 8009f48:	2205      	movs	r2, #5
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff fe7b 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e07f      	b.n	800a056 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d108      	bne.n	8009f72 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f60:	7af9      	ldrb	r1, [r7, #11]
 8009f62:	233a      	movs	r3, #58	; 0x3a
 8009f64:	2202      	movs	r2, #2
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7ff fe6d 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f70:	e071      	b.n	800a056 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	7afa      	ldrb	r2, [r7, #11]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f86:	7af9      	ldrb	r1, [r7, #11]
 8009f88:	233a      	movs	r3, #58	; 0x3a
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fe5a 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	e05e      	b.n	800a056 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3303      	adds	r3, #3
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fa8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3304      	adds	r3, #4
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009fb2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	3205      	adds	r2, #5
 8009fb8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009fba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3306      	adds	r3, #6
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009fd2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009fdc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	3209      	adds	r2, #9
 8009fe2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009fe4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ff8:	7af9      	ldrb	r1, [r7, #11]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fa02 	bl	800a404 <SCSI_CheckAddressRange>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	da02      	bge.n	800a00c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e024      	b.n	800a056 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a018:	6979      	ldr	r1, [r7, #20]
 800a01a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800a01e:	fb01 f303 	mul.w	r3, r1, r3
 800a022:	429a      	cmp	r2, r3
 800a024:	d00a      	beq.n	800a03c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a02c:	2320      	movs	r3, #32
 800a02e:	2205      	movs	r2, #5
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff fe08 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a036:	f04f 33ff 	mov.w	r3, #4294967295
 800a03a:	e00c      	b.n	800a056 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2202      	movs	r2, #2
 800a040:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a048:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	4619      	mov	r1, r3
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fa00 	bl	800a454 <SCSI_ProcessRead>
 800a054:	4603      	mov	r3, r0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	460b      	mov	r3, r1
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a072:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <SCSI_Write10+0x22>
  {
    return -1;
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	e0af      	b.n	800a1e0 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	7a1b      	ldrb	r3, [r3, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f040 80a5 	bne.w	800a1d4 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10a      	bne.n	800a0aa <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a09a:	2320      	movs	r3, #32
 800a09c:	2205      	movs	r2, #5
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fdd1 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	e09a      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a0b0:	b25b      	sxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da0a      	bge.n	800a0cc <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a0bc:	2320      	movs	r3, #32
 800a0be:	2205      	movs	r2, #5
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fdc0 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ca:	e089      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	7afa      	ldrb	r2, [r7, #11]
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	4798      	blx	r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0e0:	7af9      	ldrb	r1, [r7, #11]
 800a0e2:	233a      	movs	r3, #58	; 0x3a
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fdad 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	e076      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	7afa      	ldrb	r2, [r7, #11]
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a106:	7af9      	ldrb	r1, [r7, #11]
 800a108:	2327      	movs	r3, #39	; 0x27
 800a10a:	2202      	movs	r2, #2
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff fd9a 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a112:	f04f 33ff 	mov.w	r3, #4294967295
 800a116:	e063      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3302      	adds	r3, #2
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3303      	adds	r3, #3
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a128:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3304      	adds	r3, #4
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a132:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	3205      	adds	r2, #5
 800a138:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a13a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3307      	adds	r3, #7
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	3208      	adds	r2, #8
 800a14e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a150:	431a      	orrs	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a164:	7af9      	ldrb	r1, [r7, #11]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f94c 	bl	800a404 <SCSI_CheckAddressRange>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da02      	bge.n	800a178 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	e033      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a184:	fb02 f303 	mul.w	r3, r2, r3
 800a188:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	429a      	cmp	r2, r3
 800a194:	d00a      	beq.n	800a1ac <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a19c:	2320      	movs	r3, #32
 800a19e:	2205      	movs	r2, #5
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fd50 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1aa:	e019      	b.n	800a1e0 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1b2:	bf28      	it	cs
 800a1b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a1b8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f103 0210 	add.w	r2, r3, #16
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f002 f806 	bl	800c1dc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e005      	b.n	800a1e0 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f9b4 	bl	800a546 <SCSI_ProcessWrite>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1fc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <SCSI_Write12+0x22>
  {
    return -1;
 800a204:	f04f 33ff 	mov.w	r3, #4294967295
 800a208:	e0bf      	b.n	800a38a <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	7a1b      	ldrb	r3, [r3, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f040 80b5 	bne.w	800a37e <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a224:	2320      	movs	r3, #32
 800a226:	2205      	movs	r2, #5
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fd0c 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	e0aa      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a23a:	b25b      	sxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da0a      	bge.n	800a256 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a246:	2320      	movs	r3, #32
 800a248:	2205      	movs	r2, #5
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff fcfb 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a250:	f04f 33ff 	mov.w	r3, #4294967295
 800a254:	e099      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	7afa      	ldrb	r2, [r7, #11]
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a26a:	7af9      	ldrb	r1, [r7, #11]
 800a26c:	233a      	movs	r3, #58	; 0x3a
 800a26e:	2202      	movs	r2, #2
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff fce8 	bl	8009c46 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2205      	movs	r2, #5
 800a27a:	721a      	strb	r2, [r3, #8]
      return -1;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
 800a280:	e083      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	7afa      	ldrb	r2, [r7, #11]
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a296:	7af9      	ldrb	r1, [r7, #11]
 800a298:	2327      	movs	r3, #39	; 0x27
 800a29a:	2202      	movs	r2, #2
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fcd2 	bl	8009c46 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2205      	movs	r2, #5
 800a2a6:	721a      	strb	r2, [r3, #8]
      return -1;
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e06d      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3303      	adds	r3, #3
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a2be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a2c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	3205      	adds	r2, #5
 800a2ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a2d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3306      	adds	r3, #6
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3307      	adds	r3, #7
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a2e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a2f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	3209      	adds	r2, #9
 800a2f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a2fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a30e:	7af9      	ldrb	r1, [r7, #11]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f877 	bl	800a404 <SCSI_CheckAddressRange>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	da02      	bge.n	800a322 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a31c:	f04f 33ff 	mov.w	r3, #4294967295
 800a320:	e033      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a32e:	fb02 f303 	mul.w	r3, r2, r3
 800a332:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d00a      	beq.n	800a356 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a346:	2320      	movs	r3, #32
 800a348:	2205      	movs	r2, #5
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fc7b 	bl	8009c46 <SCSI_SenseCode>
      return -1;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	e019      	b.n	800a38a <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35c:	bf28      	it	cs
 800a35e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a362:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2201      	movs	r2, #1
 800a368:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f103 0210 	add.w	r2, r3, #16
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2101      	movs	r1, #1
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f001 ff31 	bl	800c1dc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	e005      	b.n	800a38a <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800a37e:	7afb      	ldrb	r3, [r7, #11]
 800a380:	4619      	mov	r1, r3
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f8df 	bl	800a546 <SCSI_ProcessWrite>
 800a388:	4603      	mov	r3, r0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	460b      	mov	r3, r1
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <SCSI_Verify10+0x22>
  {
    return -1;
 800a3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b2:	e023      	b.n	800a3fc <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a3c2:	7af9      	ldrb	r1, [r7, #11]
 800a3c4:	2324      	movs	r3, #36	; 0x24
 800a3c6:	2205      	movs	r2, #5
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fc3c 	bl	8009c46 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d2:	e013      	b.n	800a3fc <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a3e0:	7af9      	ldrb	r1, [r7, #11]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f80e 	bl	800a404 <SCSI_CheckAddressRange>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da02      	bge.n	800a3f4 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f2:	e003      	b.n	800a3fc <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	60da      	str	r2, [r3, #12]

  return 0;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	607a      	str	r2, [r7, #4]
 800a40e:	603b      	str	r3, [r7, #0]
 800a410:	460b      	mov	r3, r1
 800a412:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a41a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
 800a426:	e011      	b.n	800a44c <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	441a      	add	r2, r3
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a434:	429a      	cmp	r2, r3
 800a436:	d908      	bls.n	800a44a <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a438:	7af9      	ldrb	r1, [r7, #11]
 800a43a:	2321      	movs	r3, #33	; 0x21
 800a43c:	2205      	movs	r2, #5
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7ff fc01 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	e000      	b.n	800a44c <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a466:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a474:	fb02 f303 	mul.w	r3, r2, r3
 800a478:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <SCSI_ProcessRead+0x32>
  {
    return -1;
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	e05b      	b.n	800a53e <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48c:	bf28      	it	cs
 800a48e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a492:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a49a:	691c      	ldr	r4, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f103 0110 	add.w	r1, r3, #16
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	78f8      	ldrb	r0, [r7, #3]
 800a4ba:	47a0      	blx	r4
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da08      	bge.n	800a4d4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a4c2:	78f9      	ldrb	r1, [r7, #3]
 800a4c4:	2311      	movs	r3, #17
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff fbbc 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	e034      	b.n	800a53e <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0210 	add.w	r2, r3, #16
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2181      	movs	r1, #129	; 0x81
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fe5b 	bl	800c19a <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4f8:	441a      	add	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a50c:	4619      	mov	r1, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	fbb3 f3f1 	udiv	r3, r3, r1
 800a514:	1ad2      	subs	r2, r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a532:	2b00      	cmp	r3, #0
 800a534:	d102      	bne.n	800a53c <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2203      	movs	r2, #3
 800a53a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	bd90      	pop	{r4, r7, pc}

0800a546 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a546:	b590      	push	{r4, r7, lr}
 800a548:	b085      	sub	sp, #20
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a558:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a566:	fb02 f303 	mul.w	r3, r2, r3
 800a56a:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800a572:	f04f 33ff 	mov.w	r3, #4294967295
 800a576:	e06b      	b.n	800a650 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57e:	bf28      	it	cs
 800a580:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a584:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a58c:	695c      	ldr	r4, [r3, #20]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f103 0110 	add.w	r1, r3, #16
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	78f8      	ldrb	r0, [r7, #3]
 800a5ac:	47a0      	blx	r4
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	da08      	bge.n	800a5c6 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a5b4:	78f9      	ldrb	r1, [r7, #3]
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fb43 	bl	8009c46 <SCSI_SenseCode>
    return -1;
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c4:	e044      	b.n	800a650 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5da:	441a      	add	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5f6:	1ad2      	subs	r2, r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	1ad2      	subs	r2, r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a618:	2100      	movs	r1, #0
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7fe fdd8 	bl	80091d0 <MSC_BOT_SendCSW>
 800a620:	e015      	b.n	800a64e <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a62e:	fb02 f303 	mul.w	r3, r2, r3
 800a632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a636:	bf28      	it	cs
 800a638:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a63c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f103 0210 	add.w	r2, r3, #16
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2101      	movs	r1, #1
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 fdc7 	bl	800c1dc <USBD_LL_PrepareReceive>
  }

  return 0;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	bd90      	pop	{r4, r7, pc}

0800a658 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800a670:	f04f 33ff 	mov.w	r3, #4294967295
 800a674:	e013      	b.n	800a69e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800a676:	8afa      	ldrh	r2, [r7, #22]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a67c:	e00b      	b.n	800a696 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800a67e:	8afb      	ldrh	r3, [r7, #22]
 800a680:	3b01      	subs	r3, #1
 800a682:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a684:	8afb      	ldrh	r3, [r7, #22]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	441a      	add	r2, r3
 800a68a:	8afb      	ldrh	r3, [r7, #22]
 800a68c:	7811      	ldrb	r1, [r2, #0]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	460a      	mov	r2, r1
 800a694:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a696:	8afb      	ldrh	r3, [r7, #22]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f0      	bne.n	800a67e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	371c      	adds	r7, #28
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e01f      	b.n	800a702 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	79fa      	ldrb	r2, [r7, #7]
 800a6f4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f001 fbee 	bl	800bed8 <USBD_LL_Init>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a71e:	2303      	movs	r3, #3
 800a720:	e016      	b.n	800a750 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	f107 020e 	add.w	r2, r7, #14
 800a742:	4610      	mov	r0, r2
 800a744:	4798      	blx	r3
 800a746:	4602      	mov	r2, r0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fc11 	bl	800bf88 <USBD_LL_Start>
 800a766:	4603      	mov	r3, r0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a792:	2303      	movs	r3, #3
 800a794:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d009      	beq.n	800a7b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	78fa      	ldrb	r2, [r7, #3]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	4798      	blx	r3
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	4611      	mov	r1, r2
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	4798      	blx	r3
  }

  return USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 ff47 	bl	800b694 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a814:	461a      	mov	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a822:	f003 031f 	and.w	r3, r3, #31
 800a826:	2b02      	cmp	r3, #2
 800a828:	d01a      	beq.n	800a860 <USBD_LL_SetupStage+0x72>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d822      	bhi.n	800a874 <USBD_LL_SetupStage+0x86>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <USBD_LL_SetupStage+0x4a>
 800a832:	2b01      	cmp	r3, #1
 800a834:	d00a      	beq.n	800a84c <USBD_LL_SetupStage+0x5e>
 800a836:	e01d      	b.n	800a874 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f9ef 	bl	800ac24 <USBD_StdDevReq>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
      break;
 800a84a:	e020      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa53 	bl	800ad00 <USBD_StdItfReq>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]
      break;
 800a85e:	e016      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa92 	bl	800ad92 <USBD_StdEPReq>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]
      break;
 800a872:	e00c      	b.n	800a88e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a87a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 fbff 	bl	800c086 <USBD_LL_StallEP>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
      break;
 800a88c:	bf00      	nop
  }

  return ret;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d138      	bne.n	800a91e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d14a      	bne.n	800a954 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d913      	bls.n	800a8f2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	689a      	ldr	r2, [r3, #8]
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	bf28      	it	cs
 800a8e4:	4613      	movcs	r3, r2
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6879      	ldr	r1, [r7, #4]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 ffa9 	bl	800b842 <USBD_CtlContinueRx>
 800a8f0:	e030      	b.n	800a954 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d10b      	bne.n	800a916 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d005      	beq.n	800a916 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 ffa4 	bl	800b864 <USBD_CtlSendStatus>
 800a91c:	e01a      	b.n	800a954 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b03      	cmp	r3, #3
 800a928:	d114      	bne.n	800a954 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00e      	beq.n	800a954 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	7afa      	ldrb	r2, [r7, #11]
 800a940:	4611      	mov	r1, r2
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	4798      	blx	r3
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a950:	7dfb      	ldrb	r3, [r7, #23]
 800a952:	e000      	b.n	800a956 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b086      	sub	sp, #24
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	460b      	mov	r3, r1
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d16b      	bne.n	800aa4a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3314      	adds	r3, #20
 800a976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d156      	bne.n	800aa30 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	689a      	ldr	r2, [r3, #8]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d914      	bls.n	800a9b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	689a      	ldr	r2, [r3, #8]
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	1ad2      	subs	r2, r2, r3
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 ff3b 	bl	800b820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f001 fc13 	bl	800c1dc <USBD_LL_PrepareReceive>
 800a9b6:	e03b      	b.n	800aa30 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	68da      	ldr	r2, [r3, #12]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d11c      	bne.n	800a9fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d316      	bcc.n	800a9fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d20f      	bcs.n	800a9fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 ff1c 	bl	800b820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f001 fbf0 	bl	800c1dc <USBD_LL_PrepareReceive>
 800a9fc:	e018      	b.n	800aa30 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d10b      	bne.n	800aa22 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa22:	2180      	movs	r1, #128	; 0x80
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f001 fb2e 	bl	800c086 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 ff2d 	bl	800b88a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d122      	bne.n	800aa80 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff fe98 	bl	800a770 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa48:	e01a      	b.n	800aa80 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d114      	bne.n	800aa80 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00e      	beq.n	800aa80 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	7afa      	ldrb	r2, [r7, #11]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	4798      	blx	r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	e000      	b.n	800aa82 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e02f      	b.n	800ab1e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00f      	beq.n	800aae8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d009      	beq.n	800aae8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	6852      	ldr	r2, [r2, #4]
 800aae0:	b2d2      	uxtb	r2, r2
 800aae2:	4611      	mov	r1, r2
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aae8:	2340      	movs	r3, #64	; 0x40
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 fa65 	bl	800bfbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2240      	movs	r2, #64	; 0x40
 800ab00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab04:	2340      	movs	r3, #64	; 0x40
 800ab06:	2200      	movs	r2, #0
 800ab08:	2180      	movs	r1, #128	; 0x80
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fa57 	bl	800bfbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2240      	movs	r2, #64	; 0x40
 800ab1a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	78fa      	ldrb	r2, [r7, #3]
 800ab36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d106      	bne.n	800ab94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e012      	b.n	800abde <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d10b      	bne.n	800abdc <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b087      	sub	sp, #28
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	3301      	adds	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac04:	8a3b      	ldrh	r3, [r7, #16]
 800ac06:	021b      	lsls	r3, r3, #8
 800ac08:	b21a      	sxth	r2, r3
 800ac0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	b21b      	sxth	r3, r3
 800ac12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac14:	89fb      	ldrh	r3, [r7, #14]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
	...

0800ac24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac3a:	2b40      	cmp	r3, #64	; 0x40
 800ac3c:	d005      	beq.n	800ac4a <USBD_StdDevReq+0x26>
 800ac3e:	2b40      	cmp	r3, #64	; 0x40
 800ac40:	d853      	bhi.n	800acea <USBD_StdDevReq+0xc6>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <USBD_StdDevReq+0x3a>
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	d14f      	bne.n	800acea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	4798      	blx	r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5c:	e04a      	b.n	800acf4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b09      	cmp	r3, #9
 800ac64:	d83b      	bhi.n	800acde <USBD_StdDevReq+0xba>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <USBD_StdDevReq+0x48>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800acc1 	.word	0x0800acc1
 800ac70:	0800acd5 	.word	0x0800acd5
 800ac74:	0800acdf 	.word	0x0800acdf
 800ac78:	0800accb 	.word	0x0800accb
 800ac7c:	0800acdf 	.word	0x0800acdf
 800ac80:	0800ac9f 	.word	0x0800ac9f
 800ac84:	0800ac95 	.word	0x0800ac95
 800ac88:	0800acdf 	.word	0x0800acdf
 800ac8c:	0800acb7 	.word	0x0800acb7
 800ac90:	0800aca9 	.word	0x0800aca9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f9de 	bl	800b058 <USBD_GetDescriptor>
          break;
 800ac9c:	e024      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fb6d 	bl	800b380 <USBD_SetAddress>
          break;
 800aca6:	e01f      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fbac 	bl	800b408 <USBD_SetConfig>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]
          break;
 800acb4:	e018      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fc4b 	bl	800b554 <USBD_GetConfig>
          break;
 800acbe:	e013      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fc7c 	bl	800b5c0 <USBD_GetStatus>
          break;
 800acc8:	e00e      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fcab 	bl	800b628 <USBD_SetFeature>
          break;
 800acd2:	e009      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fcba 	bl	800b650 <USBD_ClrFeature>
          break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fd11 	bl	800b708 <USBD_CtlError>
          break;
 800ace6:	bf00      	nop
      }
      break;
 800ace8:	e004      	b.n	800acf4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fd0b 	bl	800b708 <USBD_CtlError>
      break;
 800acf2:	bf00      	nop
  }

  return ret;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad16:	2b40      	cmp	r3, #64	; 0x40
 800ad18:	d005      	beq.n	800ad26 <USBD_StdItfReq+0x26>
 800ad1a:	2b40      	cmp	r3, #64	; 0x40
 800ad1c:	d82f      	bhi.n	800ad7e <USBD_StdItfReq+0x7e>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <USBD_StdItfReq+0x26>
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d12b      	bne.n	800ad7e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d81d      	bhi.n	800ad70 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	889b      	ldrh	r3, [r3, #4]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d813      	bhi.n	800ad66 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	4798      	blx	r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	88db      	ldrh	r3, [r3, #6]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d110      	bne.n	800ad7a <USBD_StdItfReq+0x7a>
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10d      	bne.n	800ad7a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fd80 	bl	800b864 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad64:	e009      	b.n	800ad7a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fccd 	bl	800b708 <USBD_CtlError>
          break;
 800ad6e:	e004      	b.n	800ad7a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fcc8 	bl	800b708 <USBD_CtlError>
          break;
 800ad78:	e000      	b.n	800ad7c <USBD_StdItfReq+0x7c>
          break;
 800ad7a:	bf00      	nop
      }
      break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fcc1 	bl	800b708 <USBD_CtlError>
      break;
 800ad86:	bf00      	nop
  }

  return ret;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	889b      	ldrh	r3, [r3, #4]
 800ada4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adae:	2b40      	cmp	r3, #64	; 0x40
 800adb0:	d007      	beq.n	800adc2 <USBD_StdEPReq+0x30>
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	f200 8145 	bhi.w	800b042 <USBD_StdEPReq+0x2b0>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00c      	beq.n	800add6 <USBD_StdEPReq+0x44>
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	f040 8140 	bne.w	800b042 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	4798      	blx	r3
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
      break;
 800add4:	e13a      	b.n	800b04c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	785b      	ldrb	r3, [r3, #1]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d007      	beq.n	800adee <USBD_StdEPReq+0x5c>
 800adde:	2b03      	cmp	r3, #3
 800ade0:	f300 8129 	bgt.w	800b036 <USBD_StdEPReq+0x2a4>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d07f      	beq.n	800aee8 <USBD_StdEPReq+0x156>
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d03c      	beq.n	800ae66 <USBD_StdEPReq+0xd4>
 800adec:	e123      	b.n	800b036 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d002      	beq.n	800ae00 <USBD_StdEPReq+0x6e>
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d016      	beq.n	800ae2c <USBD_StdEPReq+0x9a>
 800adfe:	e02c      	b.n	800ae5a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00d      	beq.n	800ae22 <USBD_StdEPReq+0x90>
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b80      	cmp	r3, #128	; 0x80
 800ae0a:	d00a      	beq.n	800ae22 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 f938 	bl	800c086 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae16:	2180      	movs	r1, #128	; 0x80
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 f934 	bl	800c086 <USBD_LL_StallEP>
 800ae1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae20:	e020      	b.n	800ae64 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc6f 	bl	800b708 <USBD_CtlError>
              break;
 800ae2a:	e01b      	b.n	800ae64 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	885b      	ldrh	r3, [r3, #2]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10e      	bne.n	800ae52 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <USBD_StdEPReq+0xc0>
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b80      	cmp	r3, #128	; 0x80
 800ae3e:	d008      	beq.n	800ae52 <USBD_StdEPReq+0xc0>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	88db      	ldrh	r3, [r3, #6]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 f91a 	bl	800c086 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fd06 	bl	800b864 <USBD_CtlSendStatus>

              break;
 800ae58:	e004      	b.n	800ae64 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fc53 	bl	800b708 <USBD_CtlError>
              break;
 800ae62:	bf00      	nop
          }
          break;
 800ae64:	e0ec      	b.n	800b040 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d002      	beq.n	800ae78 <USBD_StdEPReq+0xe6>
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d016      	beq.n	800aea4 <USBD_StdEPReq+0x112>
 800ae76:	e030      	b.n	800aeda <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00d      	beq.n	800ae9a <USBD_StdEPReq+0x108>
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b80      	cmp	r3, #128	; 0x80
 800ae82:	d00a      	beq.n	800ae9a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 f8fc 	bl	800c086 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae8e:	2180      	movs	r1, #128	; 0x80
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 f8f8 	bl	800c086 <USBD_LL_StallEP>
 800ae96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae98:	e025      	b.n	800aee6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fc33 	bl	800b708 <USBD_CtlError>
              break;
 800aea2:	e020      	b.n	800aee6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	885b      	ldrh	r3, [r3, #2]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d11b      	bne.n	800aee4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 f902 	bl	800c0c4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fccf 	bl	800b864 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	4798      	blx	r3
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aed8:	e004      	b.n	800aee4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fc13 	bl	800b708 <USBD_CtlError>
              break;
 800aee2:	e000      	b.n	800aee6 <USBD_StdEPReq+0x154>
              break;
 800aee4:	bf00      	nop
          }
          break;
 800aee6:	e0ab      	b.n	800b040 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d002      	beq.n	800aefa <USBD_StdEPReq+0x168>
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d032      	beq.n	800af5e <USBD_StdEPReq+0x1cc>
 800aef8:	e097      	b.n	800b02a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <USBD_StdEPReq+0x17e>
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b80      	cmp	r3, #128	; 0x80
 800af04:	d004      	beq.n	800af10 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fbfd 	bl	800b708 <USBD_CtlError>
                break;
 800af0e:	e091      	b.n	800b034 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af14:	2b00      	cmp	r3, #0
 800af16:	da0b      	bge.n	800af30 <USBD_StdEPReq+0x19e>
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	3310      	adds	r3, #16
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	3304      	adds	r3, #4
 800af2e:	e00b      	b.n	800af48 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	4413      	add	r3, r2
 800af46:	3304      	adds	r3, #4
 800af48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2202      	movs	r2, #2
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fc47 	bl	800b7ea <USBD_CtlSendData>
              break;
 800af5c:	e06a      	b.n	800b034 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af62:	2b00      	cmp	r3, #0
 800af64:	da11      	bge.n	800af8a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	3324      	adds	r3, #36	; 0x24
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d117      	bne.n	800afb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fbc0 	bl	800b708 <USBD_CtlError>
                  break;
 800af88:	e054      	b.n	800b034 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fbad 	bl	800b708 <USBD_CtlError>
                  break;
 800afae:	e041      	b.n	800b034 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da0b      	bge.n	800afd0 <USBD_StdEPReq+0x23e>
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	3310      	adds	r3, #16
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	e00b      	b.n	800afe8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	4413      	add	r3, r2
 800afe6:	3304      	adds	r3, #4
 800afe8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <USBD_StdEPReq+0x264>
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b80      	cmp	r3, #128	; 0x80
 800aff4:	d103      	bne.n	800affe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	e00e      	b.n	800b01c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 f87d 	bl	800c102 <USBD_LL_IsStallEP>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2201      	movs	r2, #1
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	e002      	b.n	800b01c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2202      	movs	r2, #2
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fbe1 	bl	800b7ea <USBD_CtlSendData>
              break;
 800b028:	e004      	b.n	800b034 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fb6b 	bl	800b708 <USBD_CtlError>
              break;
 800b032:	bf00      	nop
          }
          break;
 800b034:	e004      	b.n	800b040 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb65 	bl	800b708 <USBD_CtlError>
          break;
 800b03e:	bf00      	nop
      }
      break;
 800b040:	e004      	b.n	800b04c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fb5f 	bl	800b708 <USBD_CtlError>
      break;
 800b04a:	bf00      	nop
  }

  return ret;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b062:	2300      	movs	r3, #0
 800b064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	885b      	ldrh	r3, [r3, #2]
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	2b0e      	cmp	r3, #14
 800b07a:	f200 8152 	bhi.w	800b322 <USBD_GetDescriptor+0x2ca>
 800b07e:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <USBD_GetDescriptor+0x2c>)
 800b080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b084:	0800b0f5 	.word	0x0800b0f5
 800b088:	0800b10d 	.word	0x0800b10d
 800b08c:	0800b14d 	.word	0x0800b14d
 800b090:	0800b323 	.word	0x0800b323
 800b094:	0800b323 	.word	0x0800b323
 800b098:	0800b2c3 	.word	0x0800b2c3
 800b09c:	0800b2ef 	.word	0x0800b2ef
 800b0a0:	0800b323 	.word	0x0800b323
 800b0a4:	0800b323 	.word	0x0800b323
 800b0a8:	0800b323 	.word	0x0800b323
 800b0ac:	0800b323 	.word	0x0800b323
 800b0b0:	0800b323 	.word	0x0800b323
 800b0b4:	0800b323 	.word	0x0800b323
 800b0b8:	0800b323 	.word	0x0800b323
 800b0bc:	0800b0c1 	.word	0x0800b0c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7c12      	ldrb	r2, [r2, #16]
 800b0d8:	f107 0108 	add.w	r1, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0e2:	e126      	b.n	800b332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fb0e 	bl	800b708 <USBD_CtlError>
        err++;
 800b0ec:	7afb      	ldrb	r3, [r7, #11]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f2:	e11e      	b.n	800b332 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	7c12      	ldrb	r2, [r2, #16]
 800b100:	f107 0108 	add.w	r1, r7, #8
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
 800b108:	60f8      	str	r0, [r7, #12]
      break;
 800b10a:	e112      	b.n	800b332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7c1b      	ldrb	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10d      	bne.n	800b130 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f107 0208 	add.w	r2, r7, #8
 800b120:	4610      	mov	r0, r2
 800b122:	4798      	blx	r3
 800b124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3301      	adds	r3, #1
 800b12a:	2202      	movs	r2, #2
 800b12c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b12e:	e100      	b.n	800b332 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	f107 0208 	add.w	r2, r7, #8
 800b13c:	4610      	mov	r0, r2
 800b13e:	4798      	blx	r3
 800b140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	2202      	movs	r2, #2
 800b148:	701a      	strb	r2, [r3, #0]
      break;
 800b14a:	e0f2      	b.n	800b332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	885b      	ldrh	r3, [r3, #2]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b05      	cmp	r3, #5
 800b154:	f200 80ac 	bhi.w	800b2b0 <USBD_GetDescriptor+0x258>
 800b158:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <USBD_GetDescriptor+0x108>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b179 	.word	0x0800b179
 800b164:	0800b1ad 	.word	0x0800b1ad
 800b168:	0800b1e1 	.word	0x0800b1e1
 800b16c:	0800b215 	.word	0x0800b215
 800b170:	0800b249 	.word	0x0800b249
 800b174:	0800b27d 	.word	0x0800b27d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7c12      	ldrb	r2, [r2, #16]
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19a:	e091      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fab2 	bl	800b708 <USBD_CtlError>
            err++;
 800b1a4:	7afb      	ldrb	r3, [r7, #11]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1aa:	e089      	b.n	800b2c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ce:	e077      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fa98 	bl	800b708 <USBD_CtlError>
            err++;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1de:	e06f      	b.n	800b2c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	7c12      	ldrb	r2, [r2, #16]
 800b1f8:	f107 0108 	add.w	r1, r7, #8
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4798      	blx	r3
 800b200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b202:	e05d      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa7e 	bl	800b708 <USBD_CtlError>
            err++;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	3301      	adds	r3, #1
 800b210:	72fb      	strb	r3, [r7, #11]
          break;
 800b212:	e055      	b.n	800b2c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	7c12      	ldrb	r2, [r2, #16]
 800b22c:	f107 0108 	add.w	r1, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
 800b234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b236:	e043      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa64 	bl	800b708 <USBD_CtlError>
            err++;
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	3301      	adds	r3, #1
 800b244:	72fb      	strb	r3, [r7, #11]
          break;
 800b246:	e03b      	b.n	800b2c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00b      	beq.n	800b26c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	7c12      	ldrb	r2, [r2, #16]
 800b260:	f107 0108 	add.w	r1, r7, #8
 800b264:	4610      	mov	r0, r2
 800b266:	4798      	blx	r3
 800b268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b26a:	e029      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa4a 	bl	800b708 <USBD_CtlError>
            err++;
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	3301      	adds	r3, #1
 800b278:	72fb      	strb	r3, [r7, #11]
          break;
 800b27a:	e021      	b.n	800b2c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	7c12      	ldrb	r2, [r2, #16]
 800b294:	f107 0108 	add.w	r1, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b29e:	e00f      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa30 	bl	800b708 <USBD_CtlError>
            err++;
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ae:	e007      	b.n	800b2c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa28 	bl	800b708 <USBD_CtlError>
          err++;
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b2be:	bf00      	nop
      }
      break;
 800b2c0:	e037      	b.n	800b332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	7c1b      	ldrb	r3, [r3, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d2:	f107 0208 	add.w	r2, r7, #8
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4798      	blx	r3
 800b2da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2dc:	e029      	b.n	800b332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa11 	bl	800b708 <USBD_CtlError>
        err++;
 800b2e6:	7afb      	ldrb	r3, [r7, #11]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ec:	e021      	b.n	800b332 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7c1b      	ldrb	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10d      	bne.n	800b312 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	f107 0208 	add.w	r2, r7, #8
 800b302:	4610      	mov	r0, r2
 800b304:	4798      	blx	r3
 800b306:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	2207      	movs	r2, #7
 800b30e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b310:	e00f      	b.n	800b332 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f9f7 	bl	800b708 <USBD_CtlError>
        err++;
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	3301      	adds	r3, #1
 800b31e:	72fb      	strb	r3, [r7, #11]
      break;
 800b320:	e007      	b.n	800b332 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f9ef 	bl	800b708 <USBD_CtlError>
      err++;
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	3301      	adds	r3, #1
 800b32e:	72fb      	strb	r3, [r7, #11]
      break;
 800b330:	bf00      	nop
  }

  if (err != 0U)
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11e      	bne.n	800b376 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	88db      	ldrh	r3, [r3, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d016      	beq.n	800b36e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b340:	893b      	ldrh	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00e      	beq.n	800b364 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	88da      	ldrh	r2, [r3, #6]
 800b34a:	893b      	ldrh	r3, [r7, #8]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	bf28      	it	cs
 800b350:	4613      	movcs	r3, r2
 800b352:	b29b      	uxth	r3, r3
 800b354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b356:	893b      	ldrh	r3, [r7, #8]
 800b358:	461a      	mov	r2, r3
 800b35a:	68f9      	ldr	r1, [r7, #12]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa44 	bl	800b7ea <USBD_CtlSendData>
 800b362:	e009      	b.n	800b378 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f9ce 	bl	800b708 <USBD_CtlError>
 800b36c:	e004      	b.n	800b378 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa78 	bl	800b864 <USBD_CtlSendStatus>
 800b374:	e000      	b.n	800b378 <USBD_GetDescriptor+0x320>
    return;
 800b376:	bf00      	nop
  }
}
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	889b      	ldrh	r3, [r3, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d131      	bne.n	800b3f6 <USBD_SetAddress+0x76>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d12d      	bne.n	800b3f6 <USBD_SetAddress+0x76>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	2b7f      	cmp	r3, #127	; 0x7f
 800b3a0:	d829      	bhi.n	800b3f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	885b      	ldrh	r3, [r3, #2]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d104      	bne.n	800b3c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f9a3 	bl	800b708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c2:	e01d      	b.n	800b400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	7bfa      	ldrb	r2, [r7, #15]
 800b3c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fec3 	bl	800c15c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa44 	bl	800b864 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ea:	e009      	b.n	800b400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f4:	e004      	b.n	800b400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f985 	bl	800b708 <USBD_CtlError>
  }
}
 800b3fe:	bf00      	nop
 800b400:	bf00      	nop
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	885b      	ldrh	r3, [r3, #2]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	4b4c      	ldr	r3, [pc, #304]	; (800b550 <USBD_SetConfig+0x148>)
 800b41e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b420:	4b4b      	ldr	r3, [pc, #300]	; (800b550 <USBD_SetConfig+0x148>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d905      	bls.n	800b434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f96c 	bl	800b708 <USBD_CtlError>
    return USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	e088      	b.n	800b546 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d002      	beq.n	800b446 <USBD_SetConfig+0x3e>
 800b440:	2b03      	cmp	r3, #3
 800b442:	d025      	beq.n	800b490 <USBD_SetConfig+0x88>
 800b444:	e071      	b.n	800b52a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b446:	4b42      	ldr	r3, [pc, #264]	; (800b550 <USBD_SetConfig+0x148>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d01c      	beq.n	800b488 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b44e:	4b40      	ldr	r3, [pc, #256]	; (800b550 <USBD_SetConfig+0x148>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b458:	4b3d      	ldr	r3, [pc, #244]	; (800b550 <USBD_SetConfig+0x148>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff f991 	bl	800a786 <USBD_SetClassConfig>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f949 	bl	800b708 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b476:	e065      	b.n	800b544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9f3 	bl	800b864 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2203      	movs	r2, #3
 800b482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b486:	e05d      	b.n	800b544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f9eb 	bl	800b864 <USBD_CtlSendStatus>
      break;
 800b48e:	e059      	b.n	800b544 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b490:	4b2f      	ldr	r3, [pc, #188]	; (800b550 <USBD_SetConfig+0x148>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d112      	bne.n	800b4be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b4a0:	4b2b      	ldr	r3, [pc, #172]	; (800b550 <USBD_SetConfig+0x148>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4aa:	4b29      	ldr	r3, [pc, #164]	; (800b550 <USBD_SetConfig+0x148>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff f984 	bl	800a7be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9d4 	bl	800b864 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4bc:	e042      	b.n	800b544 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b4be:	4b24      	ldr	r3, [pc, #144]	; (800b550 <USBD_SetConfig+0x148>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d02a      	beq.n	800b522 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff f972 	bl	800a7be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b4da:	4b1d      	ldr	r3, [pc, #116]	; (800b550 <USBD_SetConfig+0x148>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <USBD_SetConfig+0x148>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7ff f94b 	bl	800a786 <USBD_SetClassConfig>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00f      	beq.n	800b51a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f903 	bl	800b708 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff f957 	bl	800a7be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b518:	e014      	b.n	800b544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f9a2 	bl	800b864 <USBD_CtlSendStatus>
      break;
 800b520:	e010      	b.n	800b544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f99e 	bl	800b864 <USBD_CtlSendStatus>
      break;
 800b528:	e00c      	b.n	800b544 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f8eb 	bl	800b708 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b532:	4b07      	ldr	r3, [pc, #28]	; (800b550 <USBD_SetConfig+0x148>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff f940 	bl	800a7be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b53e:	2303      	movs	r3, #3
 800b540:	73fb      	strb	r3, [r7, #15]
      break;
 800b542:	bf00      	nop
  }

  return ret;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000239 	.word	0x20000239

0800b554 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d004      	beq.n	800b570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f8cd 	bl	800b708 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b56e:	e023      	b.n	800b5b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	dc02      	bgt.n	800b582 <USBD_GetConfig+0x2e>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dc03      	bgt.n	800b588 <USBD_GetConfig+0x34>
 800b580:	e015      	b.n	800b5ae <USBD_GetConfig+0x5a>
 800b582:	2b03      	cmp	r3, #3
 800b584:	d00b      	beq.n	800b59e <USBD_GetConfig+0x4a>
 800b586:	e012      	b.n	800b5ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3308      	adds	r3, #8
 800b592:	2201      	movs	r2, #1
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f927 	bl	800b7ea <USBD_CtlSendData>
        break;
 800b59c:	e00c      	b.n	800b5b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f91f 	bl	800b7ea <USBD_CtlSendData>
        break;
 800b5ac:	e004      	b.n	800b5b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f8a9 	bl	800b708 <USBD_CtlError>
        break;
 800b5b6:	bf00      	nop
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d81e      	bhi.n	800b616 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	88db      	ldrh	r3, [r3, #6]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d004      	beq.n	800b5ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f890 	bl	800b708 <USBD_CtlError>
        break;
 800b5e8:	e01a      	b.n	800b620 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d005      	beq.n	800b606 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	f043 0202 	orr.w	r2, r3, #2
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	330c      	adds	r3, #12
 800b60a:	2202      	movs	r2, #2
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f8eb 	bl	800b7ea <USBD_CtlSendData>
      break;
 800b614:	e004      	b.n	800b620 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f875 	bl	800b708 <USBD_CtlError>
      break;
 800b61e:	bf00      	nop
  }
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d106      	bne.n	800b648 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f90e 	bl	800b864 <USBD_CtlSendStatus>
  }
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b660:	b2db      	uxtb	r3, r3
 800b662:	3b01      	subs	r3, #1
 800b664:	2b02      	cmp	r3, #2
 800b666:	d80b      	bhi.n	800b680 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	885b      	ldrh	r3, [r3, #2]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d10c      	bne.n	800b68a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f8f3 	bl	800b864 <USBD_CtlSendStatus>
      }
      break;
 800b67e:	e004      	b.n	800b68a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f840 	bl	800b708 <USBD_CtlError>
      break;
 800b688:	e000      	b.n	800b68c <USBD_ClrFeature+0x3c>
      break;
 800b68a:	bf00      	nop
  }
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7ff fa91 	bl	800abe6 <SWAPBYTE>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff fa84 	bl	800abe6 <SWAPBYTE>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fa77 	bl	800abe6 <SWAPBYTE>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	80da      	strh	r2, [r3, #6]
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b712:	2180      	movs	r1, #128	; 0x80
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fcb6 	bl	800c086 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b71a:	2100      	movs	r1, #0
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fcb2 	bl	800c086 <USBD_LL_StallEP>
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	60b9      	str	r1, [r7, #8]
 800b734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d036      	beq.n	800b7ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b744:	6938      	ldr	r0, [r7, #16]
 800b746:	f000 f836 	bl	800b7b6 <USBD_GetLen>
 800b74a:	4603      	mov	r3, r0
 800b74c:	3301      	adds	r3, #1
 800b74e:	b29b      	uxth	r3, r3
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	4413      	add	r3, r2
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	701a      	strb	r2, [r3, #0]
  idx++;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	3301      	adds	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	4413      	add	r3, r2
 800b770:	2203      	movs	r2, #3
 800b772:	701a      	strb	r2, [r3, #0]
  idx++;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	3301      	adds	r3, #1
 800b778:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b77a:	e013      	b.n	800b7a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	7812      	ldrb	r2, [r2, #0]
 800b786:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	3301      	adds	r3, #1
 800b78c:	613b      	str	r3, [r7, #16]
    idx++;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	3301      	adds	r3, #1
 800b792:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b794:	7dfb      	ldrb	r3, [r7, #23]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e7      	bne.n	800b77c <USBD_GetString+0x52>
 800b7ac:	e000      	b.n	800b7b0 <USBD_GetString+0x86>
    return;
 800b7ae:	bf00      	nop
  }
}
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7c6:	e005      	b.n	800b7d4 <USBD_GetLen+0x1e>
  {
    len++;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f5      	bne.n	800b7c8 <USBD_GetLen+0x12>
  }

  return len;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	2100      	movs	r1, #0
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fcc2 	bl	800c19a <USBD_LL_Transmit>

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	2100      	movs	r1, #0
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fcb1 	bl	800c19a <USBD_LL_Transmit>

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	2100      	movs	r1, #0
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fcc1 	bl	800c1dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2204      	movs	r2, #4
 800b870:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b874:	2300      	movs	r3, #0
 800b876:	2200      	movs	r2, #0
 800b878:	2100      	movs	r1, #0
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fc8d 	bl	800c19a <USBD_LL_Transmit>

  return USBD_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2205      	movs	r2, #5
 800b896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b89a:	2300      	movs	r3, #0
 800b89c:	2200      	movs	r2, #0
 800b89e:	2100      	movs	r1, #0
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fc9b 	bl	800c1dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b8c6:	4b1f      	ldr	r3, [pc, #124]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8c8:	7a5b      	ldrb	r3, [r3, #9]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d131      	bne.n	800b934 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b8d0:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8d2:	7a5b      	ldrb	r3, [r3, #9]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	4b1a      	ldr	r3, [pc, #104]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8da:	2100      	movs	r1, #0
 800b8dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b8de:	4b19      	ldr	r3, [pc, #100]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8e0:	7a5b      	ldrb	r3, [r3, #9]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	4a17      	ldr	r2, [pc, #92]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8f0:	7a5b      	ldrb	r3, [r3, #9]
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	4b13      	ldr	r3, [pc, #76]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b8f8:	4413      	add	r3, r2
 800b8fa:	79fa      	ldrb	r2, [r7, #7]
 800b8fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b8fe:	4b11      	ldr	r3, [pc, #68]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b900:	7a5b      	ldrb	r3, [r3, #9]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	b2d1      	uxtb	r1, r2
 800b908:	4a0e      	ldr	r2, [pc, #56]	; (800b944 <FATFS_LinkDriverEx+0x94>)
 800b90a:	7251      	strb	r1, [r2, #9]
 800b90c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b90e:	7dbb      	ldrb	r3, [r7, #22]
 800b910:	3330      	adds	r3, #48	; 0x30
 800b912:	b2da      	uxtb	r2, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	3301      	adds	r3, #1
 800b91c:	223a      	movs	r2, #58	; 0x3a
 800b91e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	3302      	adds	r3, #2
 800b924:	222f      	movs	r2, #47	; 0x2f
 800b926:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	3303      	adds	r3, #3
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	2000023c 	.word	0x2000023c

0800b948 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b952:	2200      	movs	r2, #0
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff ffaa 	bl	800b8b0 <FATFS_LinkDriverEx>
 800b95c:	4603      	mov	r3, r0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &MSC_Desc, DEVICE_FS) != USBD_OK) {
 800b96c:	2200      	movs	r2, #0
 800b96e:	4912      	ldr	r1, [pc, #72]	; (800b9b8 <MX_USB_Device_Init+0x50>)
 800b970:	4812      	ldr	r0, [pc, #72]	; (800b9bc <MX_USB_Device_Init+0x54>)
 800b972:	f7fe fe9a 	bl	800a6aa <USBD_Init>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b97c:	f7f4 fe28 	bl	80005d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800b980:	490f      	ldr	r1, [pc, #60]	; (800b9c0 <MX_USB_Device_Init+0x58>)
 800b982:	480e      	ldr	r0, [pc, #56]	; (800b9bc <MX_USB_Device_Init+0x54>)
 800b984:	f7fe fec1 	bl	800a70a <USBD_RegisterClass>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b98e:	f7f4 fe1f 	bl	80005d0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK) {
 800b992:	490c      	ldr	r1, [pc, #48]	; (800b9c4 <MX_USB_Device_Init+0x5c>)
 800b994:	4809      	ldr	r0, [pc, #36]	; (800b9bc <MX_USB_Device_Init+0x54>)
 800b996:	f7fd fa71 	bl	8008e7c <USBD_MSC_RegisterStorage>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b9a0:	f7f4 fe16 	bl	80005d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <MX_USB_Device_Init+0x54>)
 800b9a6:	f7fe fed7 	bl	800a758 <USBD_Start>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b9b0:	f7f4 fe0e 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b9b4:	bf00      	nop
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20000108 	.word	0x20000108
 800b9bc:	20000248 	.word	0x20000248
 800b9c0:	20000020 	.word	0x20000020
 800b9c4:	2000015c 	.word	0x2000015c

0800b9c8 <USBD_MSC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6039      	str	r1, [r7, #0]
 800b9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_MSC_DeviceDesc);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2212      	movs	r2, #18
 800b9d8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceDesc;
 800b9da:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <USBD_MSC_DeviceDescriptor+0x20>)
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20000128 	.word	0x20000128

0800b9ec <USBD_MSC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9fe:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <USBD_MSC_LangIDStrDescriptor+0x20>)
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	2000013c 	.word	0x2000013c

0800ba10 <USBD_MSC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d105      	bne.n	800ba2e <USBD_MSC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4907      	ldr	r1, [pc, #28]	; (800ba44 <USBD_MSC_ProductStrDescriptor+0x34>)
 800ba26:	4808      	ldr	r0, [pc, #32]	; (800ba48 <USBD_MSC_ProductStrDescriptor+0x38>)
 800ba28:	f7ff fe7f 	bl	800b72a <USBD_GetString>
 800ba2c:	e004      	b.n	800ba38 <USBD_MSC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4904      	ldr	r1, [pc, #16]	; (800ba44 <USBD_MSC_ProductStrDescriptor+0x34>)
 800ba32:	4805      	ldr	r0, [pc, #20]	; (800ba48 <USBD_MSC_ProductStrDescriptor+0x38>)
 800ba34:	f7ff fe79 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <USBD_MSC_ProductStrDescriptor+0x34>)
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000518 	.word	0x20000518
 800ba48:	0800c3b4 	.word	0x0800c3b4

0800ba4c <USBD_MSC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	6039      	str	r1, [r7, #0]
 800ba56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	4904      	ldr	r1, [pc, #16]	; (800ba6c <USBD_MSC_ManufacturerStrDescriptor+0x20>)
 800ba5c:	4804      	ldr	r0, [pc, #16]	; (800ba70 <USBD_MSC_ManufacturerStrDescriptor+0x24>)
 800ba5e:	f7ff fe64 	bl	800b72a <USBD_GetString>
  return USBD_StrDesc;
 800ba62:	4b02      	ldr	r3, [pc, #8]	; (800ba6c <USBD_MSC_ManufacturerStrDescriptor+0x20>)
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20000518 	.word	0x20000518
 800ba70:	0800c3c8 	.word	0x0800c3c8

0800ba74 <USBD_MSC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	221a      	movs	r2, #26
 800ba84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba86:	f000 f843 	bl	800bb10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_MSC_SerialStrDescriptor */

  /* USER CODE END USBD_MSC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ba8a:	4b02      	ldr	r3, [pc, #8]	; (800ba94 <USBD_MSC_SerialStrDescriptor+0x20>)
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000140 	.word	0x20000140

0800ba98 <USBD_MSC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <USBD_MSC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	4907      	ldr	r1, [pc, #28]	; (800bacc <USBD_MSC_ConfigStrDescriptor+0x34>)
 800baae:	4808      	ldr	r0, [pc, #32]	; (800bad0 <USBD_MSC_ConfigStrDescriptor+0x38>)
 800bab0:	f7ff fe3b 	bl	800b72a <USBD_GetString>
 800bab4:	e004      	b.n	800bac0 <USBD_MSC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	4904      	ldr	r1, [pc, #16]	; (800bacc <USBD_MSC_ConfigStrDescriptor+0x34>)
 800baba:	4805      	ldr	r0, [pc, #20]	; (800bad0 <USBD_MSC_ConfigStrDescriptor+0x38>)
 800babc:	f7ff fe35 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <USBD_MSC_ConfigStrDescriptor+0x34>)
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20000518 	.word	0x20000518
 800bad0:	0800c3dc 	.word	0x0800c3dc

0800bad4 <USBD_MSC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d105      	bne.n	800baf2 <USBD_MSC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	4907      	ldr	r1, [pc, #28]	; (800bb08 <USBD_MSC_InterfaceStrDescriptor+0x34>)
 800baea:	4808      	ldr	r0, [pc, #32]	; (800bb0c <USBD_MSC_InterfaceStrDescriptor+0x38>)
 800baec:	f7ff fe1d 	bl	800b72a <USBD_GetString>
 800baf0:	e004      	b.n	800bafc <USBD_MSC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	4904      	ldr	r1, [pc, #16]	; (800bb08 <USBD_MSC_InterfaceStrDescriptor+0x34>)
 800baf6:	4805      	ldr	r0, [pc, #20]	; (800bb0c <USBD_MSC_InterfaceStrDescriptor+0x38>)
 800baf8:	f7ff fe17 	bl	800b72a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bafc:	4b02      	ldr	r3, [pc, #8]	; (800bb08 <USBD_MSC_InterfaceStrDescriptor+0x34>)
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000518 	.word	0x20000518
 800bb0c:	0800c3e8 	.word	0x0800c3e8

0800bb10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <Get_SerialNum+0x44>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb1c:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <Get_SerialNum+0x48>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb22:	4b0e      	ldr	r3, [pc, #56]	; (800bb5c <Get_SerialNum+0x4c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d009      	beq.n	800bb4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb36:	2208      	movs	r2, #8
 800bb38:	4909      	ldr	r1, [pc, #36]	; (800bb60 <Get_SerialNum+0x50>)
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f000 f814 	bl	800bb68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb40:	2204      	movs	r2, #4
 800bb42:	4908      	ldr	r1, [pc, #32]	; (800bb64 <Get_SerialNum+0x54>)
 800bb44:	68b8      	ldr	r0, [r7, #8]
 800bb46:	f000 f80f 	bl	800bb68 <IntToUnicode>
  }
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	0bfa0590 	.word	0x0bfa0590
 800bb58:	0bfa0594 	.word	0x0bfa0594
 800bb5c:	0bfa0598 	.word	0x0bfa0598
 800bb60:	20000142 	.word	0x20000142
 800bb64:	20000152 	.word	0x20000152

0800bb68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	4613      	mov	r3, r2
 800bb74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	75fb      	strb	r3, [r7, #23]
 800bb7e:	e027      	b.n	800bbd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	0f1b      	lsrs	r3, r3, #28
 800bb84:	2b09      	cmp	r3, #9
 800bb86:	d80b      	bhi.n	800bba0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	0f1b      	lsrs	r3, r3, #28
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	4619      	mov	r1, r3
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	440b      	add	r3, r1
 800bb98:	3230      	adds	r2, #48	; 0x30
 800bb9a:	b2d2      	uxtb	r2, r2
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	e00a      	b.n	800bbb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	0f1b      	lsrs	r3, r3, #28
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	4619      	mov	r1, r3
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	440b      	add	r3, r1
 800bbb0:	3237      	adds	r2, #55	; 0x37
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
 800bbd0:	7dfa      	ldrb	r2, [r7, #23]
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d3d3      	bcc.n	800bb80 <IntToUnicode+0x18>
  }
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b083      	sub	sp, #12
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	4603      	mov	r3, r0
 800bbee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800bbf0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	4603      	mov	r3, r0
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
 800bc0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc12:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc1a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800bc1c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	4603      	mov	r3, r0
 800bc32:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	4603      	mov	r3, r0
 800bc4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bc4c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b085      	sub	sp, #20
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	461a      	mov	r2, r3
 800bc66:	4603      	mov	r3, r0
 800bc68:	73fb      	strb	r3, [r7, #15]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bc6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	607a      	str	r2, [r7, #4]
 800bc86:	461a      	mov	r2, r3
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73fb      	strb	r3, [r7, #15]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800bc90:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800bca2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
	...

0800bcb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b0ae      	sub	sp, #184	; 0xb8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	605a      	str	r2, [r3, #4]
 800bcc2:	609a      	str	r2, [r3, #8]
 800bcc4:	60da      	str	r2, [r3, #12]
 800bcc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bcc8:	f107 0310 	add.w	r3, r7, #16
 800bccc:	2294      	movs	r2, #148	; 0x94
 800bcce:	2100      	movs	r1, #0
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 fb5b 	bl	800c38c <memset>
  if(pcdHandle->Instance==USB)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a27      	ldr	r2, [pc, #156]	; (800bd78 <HAL_PCD_MspInit+0xc8>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d146      	bne.n	800bd6e <HAL_PCD_MspInit+0xbe>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bce4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bce6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bcee:	f107 0310 	add.w	r3, r7, #16
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f8 fb74 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800bcfe:	f7f4 fc67 	bl	80005d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd02:	4b1e      	ldr	r3, [pc, #120]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd06:	4a1d      	ldr	r2, [pc, #116]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd08:	f043 0301 	orr.w	r3, r3, #1
 800bd0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd0e:	4b1b      	ldr	r3, [pc, #108]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd22:	2302      	movs	r3, #2
 800bd24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800bd34:	230a      	movs	r3, #10
 800bd36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bd3e:	4619      	mov	r1, r3
 800bd40:	480f      	ldr	r0, [pc, #60]	; (800bd80 <HAL_PCD_MspInit+0xd0>)
 800bd42:	f7f4 ffc9 	bl	8000cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd46:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd4a:	4a0c      	ldr	r2, [pc, #48]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd50:	65d3      	str	r3, [r2, #92]	; 0x5c
 800bd52:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <HAL_PCD_MspInit+0xcc>)
 800bd54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd5a:	60bb      	str	r3, [r7, #8]
 800bd5c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2100      	movs	r1, #0
 800bd62:	2049      	movs	r0, #73	; 0x49
 800bd64:	f7f4 ff83 	bl	8000c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 800bd68:	2049      	movs	r0, #73	; 0x49
 800bd6a:	f7f4 ff9a 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd6e:	bf00      	nop
 800bd70:	37b8      	adds	r7, #184	; 0xb8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	4000d400 	.word	0x4000d400
 800bd7c:	40021000 	.word	0x40021000
 800bd80:	42020000 	.word	0x42020000

0800bd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f7fe fd27 	bl	800a7ee <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	440b      	add	r3, r1
 800bdc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	f7fe fd61 	bl	800a898 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	6879      	ldr	r1, [r7, #4]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	440b      	add	r3, r1
 800bdfe:	333c      	adds	r3, #60	; 0x3c
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	4619      	mov	r1, r3
 800be06:	f7fe fdaa 	bl	800a95e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be20:	4618      	mov	r0, r3
 800be22:	f7fe febe 	bl	800aba2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be36:	2301      	movs	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d001      	beq.n	800be46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be42:	f7f4 fbc5 	bl	80005d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be4c:	7bfa      	ldrb	r2, [r7, #15]
 800be4e:	4611      	mov	r1, r2
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fe68 	bl	800ab26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe fe14 	bl	800aa8a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe fe63 	bl	800ab46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be88:	4b04      	ldr	r3, [pc, #16]	; (800be9c <HAL_PCD_SuspendCallback+0x30>)
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	4a03      	ldr	r2, [pc, #12]	; (800be9c <HAL_PCD_SuspendCallback+0x30>)
 800be8e:	f043 0306 	orr.w	r3, r3, #6
 800be92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	e000ed00 	.word	0xe000ed00

0800bea0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d007      	beq.n	800bec0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beb0:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <HAL_PCD_ResumeCallback+0x34>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	4a07      	ldr	r2, [pc, #28]	; (800bed4 <HAL_PCD_ResumeCallback+0x34>)
 800beb6:	f023 0306 	bic.w	r3, r3, #6
 800beba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bebc:	f000 fa10 	bl	800c2e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fe53 	bl	800ab72 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	e000ed00 	.word	0xe000ed00

0800bed8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bee0:	4a27      	ldr	r2, [pc, #156]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a25      	ldr	r2, [pc, #148]	; (800bf80 <USBD_LL_Init+0xa8>)
 800beec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bef0:	f7f7 fa98 	bl	8003424 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800bef4:	4b22      	ldr	r3, [pc, #136]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bef6:	4a23      	ldr	r2, [pc, #140]	; (800bf84 <USBD_LL_Init+0xac>)
 800bef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800befa:	4b21      	ldr	r3, [pc, #132]	; (800bf80 <USBD_LL_Init+0xa8>)
 800befc:	2208      	movs	r2, #8
 800befe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf00:	4b1f      	ldr	r3, [pc, #124]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf02:	2202      	movs	r2, #2
 800bf04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf06:	4b1e      	ldr	r3, [pc, #120]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf08:	2202      	movs	r2, #2
 800bf0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf0c:	4b1c      	ldr	r3, [pc, #112]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf12:	4b1b      	ldr	r3, [pc, #108]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf18:	4b19      	ldr	r3, [pc, #100]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf1e:	4b18      	ldr	r3, [pc, #96]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf24:	4816      	ldr	r0, [pc, #88]	; (800bf80 <USBD_LL_Init+0xa8>)
 800bf26:	f7f5 fd71 	bl	8001a0c <HAL_PCD_Init>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bf30:	f7f4 fb4e 	bl	80005d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf3a:	2318      	movs	r3, #24
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2100      	movs	r1, #0
 800bf40:	f7f7 f998 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf4a:	2358      	movs	r3, #88	; 0x58
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2180      	movs	r1, #128	; 0x80
 800bf50:	f7f7 f990 	bl	8003274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf5a:	2398      	movs	r3, #152	; 0x98
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2181      	movs	r1, #129	; 0x81
 800bf60:	f7f7 f988 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf6a:	23d8      	movs	r3, #216	; 0xd8
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2101      	movs	r1, #1
 800bf70:	f7f7 f980 	bl	8003274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000718 	.word	0x20000718
 800bf84:	4000d400 	.word	0x4000d400

0800bf88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f5 fe19 	bl	8001bd6 <HAL_PCD_Start>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 f99e 	bl	800c2ec <USBD_Get_USB_Status>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4611      	mov	r1, r2
 800bfca:	461a      	mov	r2, r3
 800bfcc:	4603      	mov	r3, r0
 800bfce:	70fb      	strb	r3, [r7, #3]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	70bb      	strb	r3, [r7, #2]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfe6:	78bb      	ldrb	r3, [r7, #2]
 800bfe8:	883a      	ldrh	r2, [r7, #0]
 800bfea:	78f9      	ldrb	r1, [r7, #3]
 800bfec:	f7f5 ff88 	bl	8001f00 <HAL_PCD_EP_Open>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 f978 	bl	800c2ec <USBD_Get_USB_Status>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c000:	7bbb      	ldrb	r3, [r7, #14]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f7f5 ffcf 	bl	8001fcc <HAL_PCD_EP_Close>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 f959 	bl	800c2ec <USBD_Get_USB_Status>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	4611      	mov	r1, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f7f6 f936 	bl	80022d8 <HAL_PCD_EP_Flush>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f93a 	bl	800c2ec <USBD_Get_USB_Status>
 800c078:	4603      	mov	r3, r0
 800c07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0a0:	78fa      	ldrb	r2, [r7, #3]
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7f6 f871 	bl	800218c <HAL_PCD_EP_SetStall>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 f91b 	bl	800c2ec <USBD_Get_USB_Status>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f6 f8a4 	bl	8002230 <HAL_PCD_EP_ClrStall>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f8fc 	bl	800c2ec <USBD_Get_USB_Status>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c114:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da0c      	bge.n	800c138 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c124:	68f9      	ldr	r1, [r7, #12]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	440b      	add	r3, r1
 800c132:	3302      	adds	r3, #2
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	e00b      	b.n	800c150 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c13e:	68f9      	ldr	r1, [r7, #12]
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	440b      	add	r3, r1
 800c14a:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c14e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c176:	78fa      	ldrb	r2, [r7, #3]
 800c178:	4611      	mov	r1, r2
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f5 fe9b 	bl	8001eb6 <HAL_PCD_SetAddress>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f8b0 	bl	800c2ec <USBD_Get_USB_Status>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c190:	7bbb      	ldrb	r3, [r7, #14]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b086      	sub	sp, #24
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1b8:	7af9      	ldrb	r1, [r7, #11]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	f7f5 ffa2 	bl	8002106 <HAL_PCD_EP_Transmit>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 f88f 	bl	800c2ec <USBD_Get_USB_Status>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	607a      	str	r2, [r7, #4]
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1fa:	7af9      	ldrb	r1, [r7, #11]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	f7f5 ff2c 	bl	800205c <HAL_PCD_EP_Receive>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f86e 	bl	800c2ec <USBD_Get_USB_Status>
 800c210:	4603      	mov	r3, r0
 800c212:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c214:	7dbb      	ldrb	r3, [r7, #22]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c230:	78fa      	ldrb	r2, [r7, #3]
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7f5 ff4e 	bl	80020d6 <HAL_PCD_EP_GetRxCount>
 800c23a:	4603      	mov	r3, r0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <HAL_PCDEx_LPM_Callback+0x18>
 800c256:	2b01      	cmp	r3, #1
 800c258:	d013      	beq.n	800c282 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c25a:	e023      	b.n	800c2a4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c264:	f000 f83c 	bl	800c2e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c268:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <HAL_PCDEx_LPM_Callback+0x68>)
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	4a0f      	ldr	r2, [pc, #60]	; (800c2ac <HAL_PCDEx_LPM_Callback+0x68>)
 800c26e:	f023 0306 	bic.w	r3, r3, #6
 800c272:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fc79 	bl	800ab72 <USBD_LL_Resume>
    break;
 800c280:	e010      	b.n	800c2a4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fc5c 	bl	800ab46 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d005      	beq.n	800c2a2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <HAL_PCDEx_LPM_Callback+0x68>)
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	4a04      	ldr	r2, [pc, #16]	; (800c2ac <HAL_PCDEx_LPM_Callback+0x68>)
 800c29c:	f043 0306 	orr.w	r3, r3, #6
 800c2a0:	6113      	str	r3, [r2, #16]
    break;
 800c2a2:	bf00      	nop
}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	e000ed00 	.word	0xe000ed00

0800c2b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2b8:	4b03      	ldr	r3, [pc, #12]	; (800c2c8 <USBD_static_malloc+0x18>)
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	20000a0c 	.word	0x20000a0c

0800c2cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]

}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c2e4:	f7f4 f800 	bl	80002e8 <SystemClock_Config>
}
 800c2e8:	bf00      	nop
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2fa:	79fb      	ldrb	r3, [r7, #7]
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d817      	bhi.n	800c330 <USBD_Get_USB_Status+0x44>
 800c300:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <USBD_Get_USB_Status+0x1c>)
 800c302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c306:	bf00      	nop
 800c308:	0800c319 	.word	0x0800c319
 800c30c:	0800c31f 	.word	0x0800c31f
 800c310:	0800c325 	.word	0x0800c325
 800c314:	0800c32b 	.word	0x0800c32b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
    break;
 800c31c:	e00b      	b.n	800c336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c31e:	2303      	movs	r3, #3
 800c320:	73fb      	strb	r3, [r7, #15]
    break;
 800c322:	e008      	b.n	800c336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c324:	2301      	movs	r3, #1
 800c326:	73fb      	strb	r3, [r7, #15]
    break;
 800c328:	e005      	b.n	800c336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c32a:	2303      	movs	r3, #3
 800c32c:	73fb      	strb	r3, [r7, #15]
    break;
 800c32e:	e002      	b.n	800c336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c330:	2303      	movs	r3, #3
 800c332:	73fb      	strb	r3, [r7, #15]
    break;
 800c334:	bf00      	nop
  }
  return usb_status;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <__libc_init_array>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	4d0d      	ldr	r5, [pc, #52]	; (800c37c <__libc_init_array+0x38>)
 800c348:	2600      	movs	r6, #0
 800c34a:	4c0d      	ldr	r4, [pc, #52]	; (800c380 <__libc_init_array+0x3c>)
 800c34c:	1b64      	subs	r4, r4, r5
 800c34e:	10a4      	asrs	r4, r4, #2
 800c350:	42a6      	cmp	r6, r4
 800c352:	d109      	bne.n	800c368 <__libc_init_array+0x24>
 800c354:	4d0b      	ldr	r5, [pc, #44]	; (800c384 <__libc_init_array+0x40>)
 800c356:	2600      	movs	r6, #0
 800c358:	4c0b      	ldr	r4, [pc, #44]	; (800c388 <__libc_init_array+0x44>)
 800c35a:	f000 f81f 	bl	800c39c <_init>
 800c35e:	1b64      	subs	r4, r4, r5
 800c360:	10a4      	asrs	r4, r4, #2
 800c362:	42a6      	cmp	r6, r4
 800c364:	d105      	bne.n	800c372 <__libc_init_array+0x2e>
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	f855 3b04 	ldr.w	r3, [r5], #4
 800c36c:	3601      	adds	r6, #1
 800c36e:	4798      	blx	r3
 800c370:	e7ee      	b.n	800c350 <__libc_init_array+0xc>
 800c372:	f855 3b04 	ldr.w	r3, [r5], #4
 800c376:	3601      	adds	r6, #1
 800c378:	4798      	blx	r3
 800c37a:	e7f2      	b.n	800c362 <__libc_init_array+0x1e>
 800c37c:	0800c46c 	.word	0x0800c46c
 800c380:	0800c46c 	.word	0x0800c46c
 800c384:	0800c46c 	.word	0x0800c46c
 800c388:	0800c470 	.word	0x0800c470

0800c38c <memset>:
 800c38c:	4402      	add	r2, r0
 800c38e:	4603      	mov	r3, r0
 800c390:	4293      	cmp	r3, r2
 800c392:	d100      	bne.n	800c396 <memset+0xa>
 800c394:	4770      	bx	lr
 800c396:	f803 1b01 	strb.w	r1, [r3], #1
 800c39a:	e7f9      	b.n	800c390 <memset+0x4>

0800c39c <_init>:
 800c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39e:	bf00      	nop
 800c3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a2:	bc08      	pop	{r3}
 800c3a4:	469e      	mov	lr, r3
 800c3a6:	4770      	bx	lr

0800c3a8 <_fini>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	bf00      	nop
 800c3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ae:	bc08      	pop	{r3}
 800c3b0:	469e      	mov	lr, r3
 800c3b2:	4770      	bx	lr
